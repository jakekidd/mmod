{"ast":null,"code":"import * as THREE from \"three\";\nimport { LEO_RADIUS, MMOD_SCALE } from \"./Constants\";\nexport class MMOD {\n  /**\n   * A small point object representing orbiting debris.\n   */\n  constructor() {\n    this.mesh = void 0;\n    const geometry = new THREE.SphereGeometry(1, 4, 2);\n    const material = new THREE.MeshPhongMaterial({\n      color: new THREE.Color().setHSL(Math.random(), 0.5, 0.5, THREE.SRGBColorSpace),\n      side: THREE.DoubleSide,\n      alphaToCoverage: true\n    });\n    this.mesh = new THREE.Mesh(geometry, material);\n\n    // Points on the surface of a sphere can be expressed using two\n    // spherical coordinates, theta and phi with 0 < theta < 2pi and\n    // 0 < phi < pi.\n    // Generate random values for theta and phi.\n    const theta = this.random(0, 2 * Math.PI);\n    const phi = this.random(0, Math.PI);\n    // Convert theta and phi into cartesian coordinates for the mesh.\n    this.mesh.position.x = LEO_RADIUS * Math.cos(theta) * Math.sin(phi);\n    this.mesh.position.y = LEO_RADIUS * Math.sin(theta) * Math.sin(phi);\n    this.mesh.position.z = LEO_RADIUS * Math.cos(phi);\n    this.mesh.scale.x = this.mesh.scale.y = this.mesh.scale.z = MMOD_SCALE;\n  }\n  random(min, max) {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n}","map":{"version":3,"names":["THREE","LEO_RADIUS","MMOD_SCALE","MMOD","constructor","mesh","geometry","SphereGeometry","material","MeshPhongMaterial","color","Color","setHSL","Math","random","SRGBColorSpace","side","DoubleSide","alphaToCoverage","Mesh","theta","PI","phi","position","x","cos","sin","y","z","scale","min","max","floor"],"sources":["/home/jake/ptolemy/mmod/packages/kepler/src/helpers/MMOD.ts"],"sourcesContent":["import * as THREE from \"three\";\nimport { LEO_RADIUS, MMOD_SCALE } from \"./Constants\";\n\nexport class MMOD {\n  public readonly mesh: THREE.Mesh;\n\n  /**\n   * A small point object representing orbiting debris.\n   */\n  constructor() {\n    const geometry = new THREE.SphereGeometry(1, 4, 2);\n    const material = new THREE.MeshPhongMaterial({\n      color: new THREE.Color().setHSL(\n        Math.random(),\n        0.5,\n        0.5,\n        THREE.SRGBColorSpace\n      ),\n      side: THREE.DoubleSide,\n      alphaToCoverage: true,\n    });\n    this.mesh = new THREE.Mesh(geometry, material);\n\n    // Points on the surface of a sphere can be expressed using two\n    // spherical coordinates, theta and phi with 0 < theta < 2pi and\n    // 0 < phi < pi.\n    // Generate random values for theta and phi.\n    const theta = this.random(0, 2 * Math.PI);\n    const phi = this.random(0, Math.PI);\n    // Convert theta and phi into cartesian coordinates for the mesh.\n    this.mesh.position.x = LEO_RADIUS * Math.cos(theta) * Math.sin(phi);\n    this.mesh.position.y = LEO_RADIUS * Math.sin(theta) * Math.sin(phi);\n    this.mesh.position.z = LEO_RADIUS * Math.cos(phi);\n    this.mesh.scale.x = this.mesh.scale.y = this.mesh.scale.z = MMOD_SCALE;\n  }\n\n  private random(min: number, max: number): number {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,UAAU,EAAEC,UAAU,QAAQ,aAAa;AAEpD,OAAO,MAAMC,IAAI,CAAC;EAGhB;AACF;AACA;EACEC,WAAWA,CAAA,EAAG;IAAA,KALEC,IAAI;IAMlB,MAAMC,QAAQ,GAAG,IAAIN,KAAK,CAACO,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAClD,MAAMC,QAAQ,GAAG,IAAIR,KAAK,CAACS,iBAAiB,CAAC;MAC3CC,KAAK,EAAE,IAAIV,KAAK,CAACW,KAAK,CAAC,CAAC,CAACC,MAAM,CAC7BC,IAAI,CAACC,MAAM,CAAC,CAAC,EACb,GAAG,EACH,GAAG,EACHd,KAAK,CAACe,cACR,CAAC;MACDC,IAAI,EAAEhB,KAAK,CAACiB,UAAU;MACtBC,eAAe,EAAE;IACnB,CAAC,CAAC;IACF,IAAI,CAACb,IAAI,GAAG,IAAIL,KAAK,CAACmB,IAAI,CAACb,QAAQ,EAAEE,QAAQ,CAAC;;IAE9C;IACA;IACA;IACA;IACA,MAAMY,KAAK,GAAG,IAAI,CAACN,MAAM,CAAC,CAAC,EAAE,CAAC,GAAGD,IAAI,CAACQ,EAAE,CAAC;IACzC,MAAMC,GAAG,GAAG,IAAI,CAACR,MAAM,CAAC,CAAC,EAAED,IAAI,CAACQ,EAAE,CAAC;IACnC;IACA,IAAI,CAAChB,IAAI,CAACkB,QAAQ,CAACC,CAAC,GAAGvB,UAAU,GAAGY,IAAI,CAACY,GAAG,CAACL,KAAK,CAAC,GAAGP,IAAI,CAACa,GAAG,CAACJ,GAAG,CAAC;IACnE,IAAI,CAACjB,IAAI,CAACkB,QAAQ,CAACI,CAAC,GAAG1B,UAAU,GAAGY,IAAI,CAACa,GAAG,CAACN,KAAK,CAAC,GAAGP,IAAI,CAACa,GAAG,CAACJ,GAAG,CAAC;IACnE,IAAI,CAACjB,IAAI,CAACkB,QAAQ,CAACK,CAAC,GAAG3B,UAAU,GAAGY,IAAI,CAACY,GAAG,CAACH,GAAG,CAAC;IACjD,IAAI,CAACjB,IAAI,CAACwB,KAAK,CAACL,CAAC,GAAG,IAAI,CAACnB,IAAI,CAACwB,KAAK,CAACF,CAAC,GAAG,IAAI,CAACtB,IAAI,CAACwB,KAAK,CAACD,CAAC,GAAG1B,UAAU;EACxE;EAEQY,MAAMA,CAACgB,GAAW,EAAEC,GAAW,EAAU;IAC/C;IACA,OAAOlB,IAAI,CAACmB,KAAK,CAACnB,IAAI,CAACC,MAAM,CAAC,CAAC,IAAIiB,GAAG,GAAGD,GAAG,GAAG,CAAC,CAAC,GAAGA,GAAG,CAAC;EAC1D;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}