{"ast":null,"code":"import * as THREE from \"three\";\nimport { LEO_RADIUS, MMOD_SCALE } from \"../helpers/Constants\";\nexport class MMOD {\n  /**\n   * A small point object representing orbiting debris.\n   */\n  constructor() {\n    // The three js object to be rendered.\n    this.mesh = void 0;\n    // Keplerian orbital elements.\n    // See: https://en.wikipedia.org/wiki/Orbital_elements\n    // Eccentricity represents the shape of the orbital ellipse,\n    // describing how much it is elongated compared to a circle.\n    // public readonly eccentricity: number;\n    // Semi-major axis is the sum of the periapsis and apoapsis\n    // distances divided by two.\n    // public readonly semiMajorAxis: number;\n    // Inclination is the vertical tilt of the ellipse with\n    // respect to the reference plane.\n    // public readonly inclination: number;\n    this._velocity = void 0;\n    this._rhat = [-1.0, 0.0];\n    const geometry = new THREE.SphereGeometry(1, 1, 1);\n    const material = new THREE.MeshPhongMaterial({\n      color: new THREE.Color().setHSL(0.9, 0.9, 0.9, THREE.SRGBColorSpace),\n      side: THREE.DoubleSide,\n      alphaToCoverage: true\n    });\n    this.mesh = new THREE.Mesh(geometry, material);\n\n    // Determine the initial position of the MMOD at random.\n    // Points on the surface of a sphere can be expressed using two\n    // spherical coordinates, theta and phi with 0 < theta < 2pi and\n    // 0 < phi < pi.\n    // Generate random values for theta and phi.\n    const theta = this.random(0.01, 2 * Math.PI);\n    const phi = Math.acos(this.random(-1, 1));\n    // TODO: Vary the radius slightly.\n    // Convert theta and phi into cartesian coordinates for the mesh.\n    this.mesh.position.x = LEO_RADIUS * Math.cos(theta) * Math.sin(phi);\n    this.mesh.position.y = LEO_RADIUS * Math.sin(theta) * Math.sin(phi);\n    this.mesh.position.z = LEO_RADIUS * Math.cos(phi);\n    this.mesh.scale.x = this.mesh.scale.y = this.mesh.scale.z = MMOD_SCALE;\n\n    // Initial velocity should be anywhere from 6-9 km/s.\n    const initialVelocity = this.random(6000, 9000);\n    this._velocity = [0.0, -1 * initialVelocity];\n  }\n\n  /**\n   * Proceed to the next animation frame. Reposition the\n   * @param t Time in seconds since init. It's assumed that we init at 0.\n   */\n  step(t) {}\n  random(min, max) {\n    // min and max included\n    return Math.random() * (max - min + 1) + min;\n  }\n}","map":{"version":3,"names":["THREE","LEO_RADIUS","MMOD_SCALE","MMOD","constructor","mesh","_velocity","_rhat","geometry","SphereGeometry","material","MeshPhongMaterial","color","Color","setHSL","SRGBColorSpace","side","DoubleSide","alphaToCoverage","Mesh","theta","random","Math","PI","phi","acos","position","x","cos","sin","y","z","scale","initialVelocity","step","t","min","max"],"sources":["/home/jake/ptolemy/mmod/packages/kepler/src/demo/MMOD.ts"],"sourcesContent":["import * as THREE from \"three\";\nimport { LEO_RADIUS, MMOD_SCALE } from \"../helpers/Constants\";\n\nexport class MMOD {\n  // The three js object to be rendered.\n  public readonly mesh: THREE.Mesh;\n  // Keplerian orbital elements.\n  // See: https://en.wikipedia.org/wiki/Orbital_elements\n  // Eccentricity represents the shape of the orbital ellipse,\n  // describing how much it is elongated compared to a circle.\n  // public readonly eccentricity: number;\n  // Semi-major axis is the sum of the periapsis and apoapsis\n  // distances divided by two.\n  // public readonly semiMajorAxis: number;\n  // Inclination is the vertical tilt of the ellipse with\n  // respect to the reference plane.\n  // public readonly inclination: number;\n  private _velocity: number[];\n  private _rhat: number[] = [-1.0, 0.0];\n\n  /**\n   * A small point object representing orbiting debris.\n   */\n  constructor() {\n    const geometry = new THREE.SphereGeometry(1, 1, 1);\n    const material = new THREE.MeshPhongMaterial({\n      color: new THREE.Color().setHSL(0.9, 0.9, 0.9, THREE.SRGBColorSpace),\n      side: THREE.DoubleSide,\n      alphaToCoverage: true,\n    });\n    this.mesh = new THREE.Mesh(geometry, material);\n\n    // Determine the initial position of the MMOD at random.\n    // Points on the surface of a sphere can be expressed using two\n    // spherical coordinates, theta and phi with 0 < theta < 2pi and\n    // 0 < phi < pi.\n    // Generate random values for theta and phi.\n    const theta = this.random(0.01, 2 * Math.PI);\n    const phi = Math.acos(this.random(-1, 1));\n    // TODO: Vary the radius slightly.\n    // Convert theta and phi into cartesian coordinates for the mesh.\n    this.mesh.position.x = LEO_RADIUS * Math.cos(theta) * Math.sin(phi);\n    this.mesh.position.y = LEO_RADIUS * Math.sin(theta) * Math.sin(phi);\n    this.mesh.position.z = LEO_RADIUS * Math.cos(phi);\n    this.mesh.scale.x = this.mesh.scale.y = this.mesh.scale.z = MMOD_SCALE;\n\n    // Initial velocity should be anywhere from 6-9 km/s.\n    const initialVelocity = this.random(6000, 9000);\n    this._velocity = [0.0, -1 * initialVelocity];\n  }\n\n  /**\n   * Proceed to the next animation frame. Reposition the\n   * @param t Time in seconds since init. It's assumed that we init at 0.\n   */\n  private step(t: number): void {}\n\n  private random(min: number, max: number): number {\n    // min and max included\n    return Math.random() * (max - min + 1) + min;\n  }\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,UAAU,EAAEC,UAAU,QAAQ,sBAAsB;AAE7D,OAAO,MAAMC,IAAI,CAAC;EAiBhB;AACF;AACA;EACEC,WAAWA,CAAA,EAAG;IAnBd;IAAA,KACgBC,IAAI;IACpB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAAA,KACQC,SAAS;IAAA,KACTC,KAAK,GAAa,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC;IAMnC,MAAMC,QAAQ,GAAG,IAAIR,KAAK,CAACS,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAClD,MAAMC,QAAQ,GAAG,IAAIV,KAAK,CAACW,iBAAiB,CAAC;MAC3CC,KAAK,EAAE,IAAIZ,KAAK,CAACa,KAAK,CAAC,CAAC,CAACC,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAEd,KAAK,CAACe,cAAc,CAAC;MACpEC,IAAI,EAAEhB,KAAK,CAACiB,UAAU;MACtBC,eAAe,EAAE;IACnB,CAAC,CAAC;IACF,IAAI,CAACb,IAAI,GAAG,IAAIL,KAAK,CAACmB,IAAI,CAACX,QAAQ,EAAEE,QAAQ,CAAC;;IAE9C;IACA;IACA;IACA;IACA;IACA,MAAMU,KAAK,GAAG,IAAI,CAACC,MAAM,CAAC,IAAI,EAAE,CAAC,GAAGC,IAAI,CAACC,EAAE,CAAC;IAC5C,MAAMC,GAAG,GAAGF,IAAI,CAACG,IAAI,CAAC,IAAI,CAACJ,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACzC;IACA;IACA,IAAI,CAAChB,IAAI,CAACqB,QAAQ,CAACC,CAAC,GAAG1B,UAAU,GAAGqB,IAAI,CAACM,GAAG,CAACR,KAAK,CAAC,GAAGE,IAAI,CAACO,GAAG,CAACL,GAAG,CAAC;IACnE,IAAI,CAACnB,IAAI,CAACqB,QAAQ,CAACI,CAAC,GAAG7B,UAAU,GAAGqB,IAAI,CAACO,GAAG,CAACT,KAAK,CAAC,GAAGE,IAAI,CAACO,GAAG,CAACL,GAAG,CAAC;IACnE,IAAI,CAACnB,IAAI,CAACqB,QAAQ,CAACK,CAAC,GAAG9B,UAAU,GAAGqB,IAAI,CAACM,GAAG,CAACJ,GAAG,CAAC;IACjD,IAAI,CAACnB,IAAI,CAAC2B,KAAK,CAACL,CAAC,GAAG,IAAI,CAACtB,IAAI,CAAC2B,KAAK,CAACF,CAAC,GAAG,IAAI,CAACzB,IAAI,CAAC2B,KAAK,CAACD,CAAC,GAAG7B,UAAU;;IAEtE;IACA,MAAM+B,eAAe,GAAG,IAAI,CAACZ,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC;IAC/C,IAAI,CAACf,SAAS,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG2B,eAAe,CAAC;EAC9C;;EAEA;AACF;AACA;AACA;EACUC,IAAIA,CAACC,CAAS,EAAQ,CAAC;EAEvBd,MAAMA,CAACe,GAAW,EAAEC,GAAW,EAAU;IAC/C;IACA,OAAOf,IAAI,CAACD,MAAM,CAAC,CAAC,IAAIgB,GAAG,GAAGD,GAAG,GAAG,CAAC,CAAC,GAAGA,GAAG;EAC9C;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}