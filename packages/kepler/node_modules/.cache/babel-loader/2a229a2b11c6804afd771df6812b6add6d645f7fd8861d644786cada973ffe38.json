{"ast":null,"code":"var _jsxFileName = \"/Users/jakek/ptolemy/mmod/packages/kepler/src/Kepler.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport \"./Kepler.css\";\nimport * as THREE from \"three\";\nimport { GUI } from \"three/examples/jsm/libs/lil-gui.module.min.js\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { MMOD } from \"./scene/MMOD\";\nimport { EARTH_RADIUS } from \"./helpers/Constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// import { Aggregator } from \"./model/Aggregator\";\n\n// An alternative filesystem replacement to be used for importing flight path data.\nconst {\n  fs\n} = require(\"filer\");\n\n// TODO: This is so stupid, pls fix\nconst JAKE_ABS_PATH = \"/Users/jakek/ptolemy/mmod/packages/kepler\";\nconst GUI_PARAMS = {\n  showHelpers: true,\n  alphaToCoverage: true\n};\n\n// TODO: Make this a GUI variable ??\n// Seconds that will elapse in sim time per animation frame.\nconst FRAMERATE = 5000;\nconst SECONDS_PER_FRAME = 10;\nconst MAX_MMODS = 100;\n\n// TODO: Move to state?\n// Main components of the three.js nested web GL process.\nlet renderer;\nlet scene;\nlet camera;\n// Current sim time in UTC seconds. Used in the event we want to speed things up.\nlet time;\n// Whether or not the three.js canvas renderer and scene have been initialized.\n// Note that we do not use state here, as we just want to prevent redundant init\n// calls in useEffect.\nlet initialized = false;\nconst mmods = [];\n// Alice is an Identifier agent observing MMODs.\n// let alice: Identifier;\n\nfunction Kepler() {\n  _s();\n  useEffect(init, [animate, onWindowResize]);\n\n  // Gather all the flight path filepaths.\n  function collectFlightPaths(directory) {\n    let jsonFilePaths = [];\n    let dirExists = false;\n\n    // TODO: Stupid, fix!\n    fs.exists(directory, exists => dirExists = exists);\n    if (dirExists) {\n      fs.readdir(directory, (err, files) => {\n        if (err) {\n          console.error(`[Kepler.collectFlightPaths] Error: Could not perform fs.readdir on directory ${directory}.`);\n          return;\n        }\n        console.log(`[Kepler.collectFlightPaths] Searching for flight paths in directory: ${directory}...`);\n        const jsonFiles = files.filter(file => file.includes(\".json\"));\n        if (jsonFiles.length === 0) {\n          console.error(`[Kepler.collectFlightPaths] Error: No flight paths found in ${directory}.`);\n          return;\n        }\n        jsonFilePaths = jsonFiles.map(file => directory + file);\n      });\n    } else {\n      console.error(`[Kepler.collectFlightPaths] Error: Directory ${directory} not found.`);\n    }\n    return jsonFilePaths;\n  }\n\n  // useEffect(tleTest, []);\n  function tleTest() {\n    // const ISS_TLE = [\n    //   `1 25544U 98067A   19156.50900463  .00003075  00000-0  59442-4 0  9992`,\n    //   `2 25544  51.6433  59.2583 0008217  16.4489 347.6017 15.51174618173442`,\n    // ];\n    // const satrec = satellite.twoline2satrec(ISS_TLE[0], ISS_TLE[1]);\n    // console.log(\"satrec\", satrec);\n    // // Get the position of the satellite at the given date\n    // const date = new Date();\n    // date.setHours(date.getHours() + 4);\n    // const positionAndVelocity = satellite.propagate(satrec, date);\n    // if (typeof positionAndVelocity === \"boolean\") {\n    //   console.log(\"Is a boolean.\", positionAndVelocity);\n    //   return;\n    // }\n    // const gmst = satellite.gstime(date);\n    // const position = satellite.eciToGeodetic(\n    //   positionAndVelocity.position as any,\n    //   gmst\n    // );\n    // console.log(\"Positional data:\");\n    // console.log(position);\n    // console.log(position.longitude); // in radians\n    // console.log(position.latitude); // in radians\n    // console.log(position.height); // in km\n  }\n  function init() {\n    // Check whether initialized.\n    if (initialized) {\n      return;\n    }\n    initialized = true;\n\n    // Set initial UTC timestamp in seconds.\n    // time = new Date().getUTCSeconds();\n    time = 0; // TODO: Is this right?\n\n    // Init the three.js WebGLRenderer, which will draw the scene on the canvas.\n    renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.localClippingEnabled = true;\n    document.body.appendChild(renderer.domElement);\n\n    // Init scene, which holds objects for rendering.\n    scene = new THREE.Scene();\n\n    // Init camera\n    camera = new THREE.PerspectiveCamera(40, window.innerWidth / window.innerHeight, 1, 200);\n    camera.position.set(-EARTH_RADIUS - 10, EARTH_RADIUS + 10, EARTH_RADIUS + 10);\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.addEventListener(\"change\", render); // use only if there is no animation loop\n    controls.minDistance = EARTH_RADIUS + 10;\n    controls.maxDistance = EARTH_RADIUS + 18;\n    controls.enablePan = false;\n    const light = new THREE.HemisphereLight(0xffffff, 0x080808, 4.5);\n    light.position.set(-4, 1, 1.25);\n    scene.add(light);\n\n    // Create an earth sphere around which our MMODs will be orbit.\n    // TODO: Add a transparent slightly larger sphere to illustrate the range of LEO.\n    const earthGroup = new THREE.Group();\n    const earthGeometry = new THREE.SphereGeometry(EARTH_RADIUS, 48, 24);\n    const earthMaterial = new THREE.MeshPhongMaterial({\n      color: new THREE.Color().setHSL(0.8, 0.5, 0.5, THREE.SRGBColorSpace),\n      side: THREE.DoubleSide,\n      alphaToCoverage: true\n    });\n    earthGroup.add(new THREE.Mesh(earthGeometry, earthMaterial));\n    // Add the earth group to the scene.\n    scene.add(earthGroup);\n\n    // Init the MMOD meshes, small object points that will be orbiting the\n    // earth sphere.\n    // TODO: Fix this!\n    // const directory = `${JAKE_ABS_PATH}/artifacts/orbits`\n    const directory = \"/artifacts/orbits\";\n    const files = collectFlightPaths(directory);\n    if (files.length === 0) {\n      console.warn(\"No MMOD flight paths found. Please generate using `yarn run precalc`.\");\n    } else {\n      console.log(`Acquired ${files.length} files of flight path data.`);\n    }\n    for (let i = 0; i < Math.min(files.length, MAX_MMODS); i++) {\n      const data = fs.readFileSync(files[i]).toString();\n      const flight = JSON.parse(data);\n      const mmod = new MMOD({\n        scene,\n        flight\n      });\n      mmods.push(mmod);\n    }\n\n    // TODO: Fix Alice's light cone.\n    // Init Alice, an Identifier.\n    // alice = new Identifier(scene);\n\n    // Init and set up the mini GUI.\n    const gui = new GUI();\n    gui.add(GUI_PARAMS, \"alphaToCoverage\").onChange(function (value) {\n      earthGroup.children.forEach(c => {\n        c.material.alphaToCoverage = Boolean(value);\n        c.material.needsUpdate = true;\n      });\n      render();\n    });\n\n    // Add a window event listener that will fire when the browser window is resized.\n    window.addEventListener(\"resize\", onWindowResize);\n\n    // Start the animation process.\n    animate();\n\n    // TODO: REMOVE\n    // const date = new Date();\n    // date.setUTCSeconds(time);\n    // const tle = mmods[0].tle(date);\n    // console.log(\"MMOD TLE:\", \"\\n\", tle[0], \"\\n\", tle[1]);\n\n    // const satrec = satellite.twoline2satrec(tle[0], tle[1]);\n    // console.log(\"MMOD SATREC:\", satrec);\n\n    // // Get the position of the satellite at the given date\n    // date.setHours(date.getHours() + 4);\n    // const positionAndVelocity = satellite.propagate(satrec, date);\n    // if (typeof positionAndVelocity === \"boolean\") {\n    //   console.log(\"Is a boolean.\", positionAndVelocity);\n    //   return;\n    // }\n    // const gmst = satellite.gstime(date);\n    // const position = satellite.eciToGeodetic(\n    //   positionAndVelocity.position as any,\n    //   gmst\n    // );\n\n    // console.log(\"Positional data:\");\n    // console.log(position);\n    // console.log(position.longitude); // in radians\n    // console.log(position.latitude); // in radians\n    // console.log(position.height); // in km\n\n    // const aggregator = new Aggregator();\n    // aggregator.example();\n  }\n  function onWindowResize() {\n    // Set the ratio of the camera's aspect to match the browser window size.\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    render();\n  }\n  function render() {\n    renderer.render(scene, camera);\n  }\n  function animate() {\n    time += SECONDS_PER_FRAME;\n    setInterval(() => {\n      requestAnimationFrame(animate);\n    }, FRAMERATE);\n    for (const mmod of mmods) {\n      mmod.step(time);\n    }\n    render();\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"kepler\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 264,\n    columnNumber: 10\n  }, this);\n}\n_s(Kepler, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Kepler;\nexport default Kepler;\nvar _c;\n$RefreshReg$(_c, \"Kepler\");","map":{"version":3,"names":["React","useEffect","THREE","GUI","OrbitControls","MMOD","EARTH_RADIUS","jsxDEV","_jsxDEV","fs","require","JAKE_ABS_PATH","GUI_PARAMS","showHelpers","alphaToCoverage","FRAMERATE","SECONDS_PER_FRAME","MAX_MMODS","renderer","scene","camera","time","initialized","mmods","Kepler","_s","init","animate","onWindowResize","collectFlightPaths","directory","jsonFilePaths","dirExists","exists","readdir","err","files","console","error","log","jsonFiles","filter","file","includes","length","map","tleTest","WebGLRenderer","antialias","setPixelRatio","window","devicePixelRatio","setSize","innerWidth","innerHeight","localClippingEnabled","document","body","appendChild","domElement","Scene","PerspectiveCamera","position","set","controls","addEventListener","render","minDistance","maxDistance","enablePan","light","HemisphereLight","add","earthGroup","Group","earthGeometry","SphereGeometry","earthMaterial","MeshPhongMaterial","color","Color","setHSL","SRGBColorSpace","side","DoubleSide","Mesh","warn","i","Math","min","data","readFileSync","toString","flight","JSON","parse","mmod","push","gui","onChange","value","children","forEach","c","material","Boolean","needsUpdate","aspect","updateProjectionMatrix","setInterval","requestAnimationFrame","step","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jakek/ptolemy/mmod/packages/kepler/src/Kepler.tsx"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport \"./Kepler.css\";\nimport * as THREE from \"three\";\nimport { GUI } from \"three/examples/jsm/libs/lil-gui.module.min.js\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { MMOD } from \"./scene/MMOD\";\nimport { EARTH_RADIUS } from \"./helpers/Constants\";\nimport { Identifier } from \"./scene/Identifier\";\n// import { Aggregator } from \"./model/Aggregator\";\n\n// An alternative filesystem replacement to be used for importing flight path data.\nconst { fs } = require(\"filer\");\n\n// TODO: This is so stupid, pls fix\nconst JAKE_ABS_PATH = \"/Users/jakek/ptolemy/mmod/packages/kepler\";\n\nconst GUI_PARAMS = {\n  showHelpers: true,\n  alphaToCoverage: true,\n};\n\n// TODO: Make this a GUI variable ??\n// Seconds that will elapse in sim time per animation frame.\nconst FRAMERATE = 5000;\nconst SECONDS_PER_FRAME = 10;\nconst MAX_MMODS = 100;\n\n// TODO: Move to state?\n// Main components of the three.js nested web GL process.\nlet renderer: THREE.WebGLRenderer;\nlet scene: THREE.Scene;\nlet camera: THREE.PerspectiveCamera;\n// Current sim time in UTC seconds. Used in the event we want to speed things up.\nlet time: number;\n// Whether or not the three.js canvas renderer and scene have been initialized.\n// Note that we do not use state here, as we just want to prevent redundant init\n// calls in useEffect.\nlet initialized = false;\n\nconst mmods: MMOD[] = [];\n// Alice is an Identifier agent observing MMODs.\n// let alice: Identifier;\n\nfunction Kepler() {\n\n  useEffect(init, [animate, onWindowResize]);\n\n  // Gather all the flight path filepaths.\n  function collectFlightPaths(directory: string): string[] {\n    let jsonFilePaths: string[] = [];\n    let dirExists = false;\n\n    // TODO: Stupid, fix!\n    fs.exists(directory, (exists: boolean) => dirExists = exists)\n    if (dirExists) {\n      fs.readdir(directory, (err: any, files: string[]) => {\n        if (err) {\n          console.error(\n            `[Kepler.collectFlightPaths] Error: Could not perform fs.readdir on directory ${directory}.`\n          );\n          return;\n        }\n        console.log(`[Kepler.collectFlightPaths] Searching for flight paths in directory: ${directory}...`);\n        const jsonFiles = files.filter((file) => file.includes(\".json\"));\n        if (jsonFiles.length === 0) {\n          console.error(\n            `[Kepler.collectFlightPaths] Error: No flight paths found in ${directory}.`\n          );\n          return;\n        }\n        jsonFilePaths = jsonFiles.map((file) => directory + file);\n      });\n    } else {\n      console.error(\n        `[Kepler.collectFlightPaths] Error: Directory ${directory} not found.`\n      );\n    }\n    return jsonFilePaths;\n  }\n\n  // useEffect(tleTest, []);\n  function tleTest(): void {\n    // const ISS_TLE = [\n    //   `1 25544U 98067A   19156.50900463  .00003075  00000-0  59442-4 0  9992`,\n    //   `2 25544  51.6433  59.2583 0008217  16.4489 347.6017 15.51174618173442`,\n    // ];\n    // const satrec = satellite.twoline2satrec(ISS_TLE[0], ISS_TLE[1]);\n    // console.log(\"satrec\", satrec);\n    // // Get the position of the satellite at the given date\n    // const date = new Date();\n    // date.setHours(date.getHours() + 4);\n    // const positionAndVelocity = satellite.propagate(satrec, date);\n    // if (typeof positionAndVelocity === \"boolean\") {\n    //   console.log(\"Is a boolean.\", positionAndVelocity);\n    //   return;\n    // }\n    // const gmst = satellite.gstime(date);\n    // const position = satellite.eciToGeodetic(\n    //   positionAndVelocity.position as any,\n    //   gmst\n    // );\n    // console.log(\"Positional data:\");\n    // console.log(position);\n    // console.log(position.longitude); // in radians\n    // console.log(position.latitude); // in radians\n    // console.log(position.height); // in km\n  }\n\n  function init(): void {\n    // Check whether initialized.\n    if (initialized) {\n      return;\n    }\n    initialized = true;\n\n    // Set initial UTC timestamp in seconds.\n    // time = new Date().getUTCSeconds();\n    time = 0; // TODO: Is this right?\n\n    // Init the three.js WebGLRenderer, which will draw the scene on the canvas.\n    renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.localClippingEnabled = true;\n    document.body.appendChild(renderer.domElement);\n\n    // Init scene, which holds objects for rendering.\n    scene = new THREE.Scene();\n\n    // Init camera\n    camera = new THREE.PerspectiveCamera(\n      40,\n      window.innerWidth / window.innerHeight,\n      1,\n      200\n    );\n\n    camera.position.set(\n      -EARTH_RADIUS - 10,\n      EARTH_RADIUS + 10,\n      EARTH_RADIUS + 10\n    );\n\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.addEventListener(\"change\", render); // use only if there is no animation loop\n    controls.minDistance = EARTH_RADIUS + 10;\n    controls.maxDistance = EARTH_RADIUS + 18;\n    controls.enablePan = false;\n\n    const light = new THREE.HemisphereLight(0xffffff, 0x080808, 4.5);\n    light.position.set(-4, 1, 1.25);\n    scene.add(light);\n\n    // Create an earth sphere around which our MMODs will be orbit.\n    // TODO: Add a transparent slightly larger sphere to illustrate the range of LEO.\n    const earthGroup = new THREE.Group();\n    const earthGeometry = new THREE.SphereGeometry(EARTH_RADIUS, 48, 24);\n    const earthMaterial = new THREE.MeshPhongMaterial({\n      color: new THREE.Color().setHSL(0.8, 0.5, 0.5, THREE.SRGBColorSpace),\n      side: THREE.DoubleSide,\n      alphaToCoverage: true,\n    });\n    earthGroup.add(new THREE.Mesh(earthGeometry, earthMaterial));\n    // Add the earth group to the scene.\n    scene.add(earthGroup);\n\n    // Init the MMOD meshes, small object points that will be orbiting the\n    // earth sphere.\n    // TODO: Fix this!\n    // const directory = `${JAKE_ABS_PATH}/artifacts/orbits`\n    const directory = \"/artifacts/orbits\";\n    const files = collectFlightPaths(directory);\n    if (files.length === 0) {\n      console.warn(\"No MMOD flight paths found. Please generate using `yarn run precalc`.\")\n    } else {\n      console.log(`Acquired ${files.length} files of flight path data.`)\n    }\n    for (let i = 0; i < Math.min(files.length, MAX_MMODS); i++) {\n      const data = fs.readFileSync(files[i]).toString();\n      const flight = JSON.parse(data);\n      const mmod = new MMOD({ scene, flight });\n      mmods.push(mmod);\n    }\n\n    // TODO: Fix Alice's light cone.\n    // Init Alice, an Identifier.\n    // alice = new Identifier(scene);\n\n    // Init and set up the mini GUI.\n    const gui = new GUI();\n    gui.add(GUI_PARAMS, \"alphaToCoverage\").onChange(function (value) {\n      earthGroup.children.forEach((c: any) => {\n        c.material.alphaToCoverage = Boolean(value);\n        c.material.needsUpdate = true;\n      });\n\n      render();\n    });\n\n    // Add a window event listener that will fire when the browser window is resized.\n    window.addEventListener(\"resize\", onWindowResize);\n\n    // Start the animation process.\n    animate();\n\n    // TODO: REMOVE\n    // const date = new Date();\n    // date.setUTCSeconds(time);\n    // const tle = mmods[0].tle(date);\n    // console.log(\"MMOD TLE:\", \"\\n\", tle[0], \"\\n\", tle[1]);\n\n    // const satrec = satellite.twoline2satrec(tle[0], tle[1]);\n    // console.log(\"MMOD SATREC:\", satrec);\n\n    // // Get the position of the satellite at the given date\n    // date.setHours(date.getHours() + 4);\n    // const positionAndVelocity = satellite.propagate(satrec, date);\n    // if (typeof positionAndVelocity === \"boolean\") {\n    //   console.log(\"Is a boolean.\", positionAndVelocity);\n    //   return;\n    // }\n    // const gmst = satellite.gstime(date);\n    // const position = satellite.eciToGeodetic(\n    //   positionAndVelocity.position as any,\n    //   gmst\n    // );\n\n    // console.log(\"Positional data:\");\n    // console.log(position);\n    // console.log(position.longitude); // in radians\n    // console.log(position.latitude); // in radians\n    // console.log(position.height); // in km\n\n    // const aggregator = new Aggregator();\n    // aggregator.example();\n  }\n\n  function onWindowResize(): void {\n    // Set the ratio of the camera's aspect to match the browser window size.\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    render();\n  }\n\n  function render(): void {\n    renderer.render(scene, camera);\n  }\n\n  function animate(): void {\n    time += SECONDS_PER_FRAME;\n\n    setInterval(() => {\n      requestAnimationFrame(animate);\n    }, FRAMERATE);\n\n    for (const mmod of mmods) {\n      mmod.step(time);\n    }\n\n    render();\n  }\n\n  return <div className=\"kepler\"></div>;\n}\n\nexport default Kepler;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}