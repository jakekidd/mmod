{"ast":null,"code":"import * as THREE from \"three\";\nimport { LEO_RADIUS, MMOD_SCALE } from \"./Constants\";\nexport class MMOD {\n  /**\n   * A small point object representing orbiting debris.\n   */\n  constructor() {\n    // The three js object to be rendered.\n    this.mesh = void 0;\n    // Keplerian orbital elements.\n    // See: https://en.wikipedia.org/wiki/Orbital_elements\n    // Eccentricity represents the shape of the orbital ellipse,\n    // describing how much it is elongated compared to a circle.\n    this.eccentricity = void 0;\n    // Semi-major axis is the sum of the periapsis and apoapsis\n    // distances divided by two.\n    this.semiMajorAxis = void 0;\n    // Inclination is the vertical tilt of the ellipse with\n    // respect to the reference plane.\n    this.inclination = void 0;\n    const geometry = new THREE.SphereGeometry(1, 1, 1);\n    const material = new THREE.MeshPhongMaterial({\n      color: new THREE.Color().setHSL(0.9, 0.9, 0.9, THREE.SRGBColorSpace),\n      side: THREE.DoubleSide,\n      alphaToCoverage: true\n    });\n    this.mesh = new THREE.Mesh(geometry, material);\n\n    // Determine the initial position of the MMOD at random.\n    // Points on the surface of a sphere can be expressed using two\n    // spherical coordinates, theta and phi with 0 < theta < 2pi and\n    // 0 < phi < pi.\n    // Generate random values for theta and phi.\n    const theta = this.random(0.01, 2 * Math.PI);\n    const phi = Math.acos(this.random(-1, 1));\n    // TODO: Vary the radius slightly.\n    // Convert theta and phi into cartesian coordinates for the mesh.\n    this.mesh.position.x = LEO_RADIUS * Math.cos(theta) * Math.sin(phi);\n    this.mesh.position.y = LEO_RADIUS * Math.sin(theta) * Math.sin(phi);\n    this.mesh.position.z = LEO_RADIUS * Math.cos(phi);\n    this.mesh.scale.x = this.mesh.scale.y = this.mesh.scale.z = MMOD_SCALE;\n  }\n  random(min, max) {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n}","map":{"version":3,"names":["THREE","LEO_RADIUS","MMOD_SCALE","MMOD","constructor","mesh","eccentricity","semiMajorAxis","inclination","geometry","SphereGeometry","material","MeshPhongMaterial","color","Color","setHSL","SRGBColorSpace","side","DoubleSide","alphaToCoverage","Mesh","theta","random","Math","PI","phi","acos","position","x","cos","sin","y","z","scale","min","max","floor"],"sources":["/home/jake/ptolemy/mmod/packages/kepler/src/helpers/MMOD.ts"],"sourcesContent":["import * as THREE from \"three\";\nimport { LEO_RADIUS, MMOD_SCALE } from \"./Constants\";\n\nexport class MMOD {\n  // The three js object to be rendered.\n  public readonly mesh: THREE.Mesh;\n  // Keplerian orbital elements.\n  // See: https://en.wikipedia.org/wiki/Orbital_elements\n  // Eccentricity represents the shape of the orbital ellipse,\n  // describing how much it is elongated compared to a circle.\n  public readonly eccentricity: number;\n  // Semi-major axis is the sum of the periapsis and apoapsis\n  // distances divided by two.\n  public readonly semiMajorAxis: number;\n  // Inclination is the vertical tilt of the ellipse with\n  // respect to the reference plane.\n  public readonly inclination: number;\n\n  /**\n   * A small point object representing orbiting debris.\n   */\n  constructor() {\n    const geometry = new THREE.SphereGeometry(1, 1, 1);\n    const material = new THREE.MeshPhongMaterial({\n      color: new THREE.Color().setHSL(0.9, 0.9, 0.9, THREE.SRGBColorSpace),\n      side: THREE.DoubleSide,\n      alphaToCoverage: true,\n    });\n    this.mesh = new THREE.Mesh(geometry, material);\n\n    // Determine the initial position of the MMOD at random.\n    // Points on the surface of a sphere can be expressed using two\n    // spherical coordinates, theta and phi with 0 < theta < 2pi and\n    // 0 < phi < pi.\n    // Generate random values for theta and phi.\n    const theta = this.random(0.01, 2 * Math.PI);\n    const phi = Math.acos(this.random(-1, 1));\n    // TODO: Vary the radius slightly.\n    // Convert theta and phi into cartesian coordinates for the mesh.\n    this.mesh.position.x = LEO_RADIUS * Math.cos(theta) * Math.sin(phi);\n    this.mesh.position.y = LEO_RADIUS * Math.sin(theta) * Math.sin(phi);\n    this.mesh.position.z = LEO_RADIUS * Math.cos(phi);\n    this.mesh.scale.x = this.mesh.scale.y = this.mesh.scale.z = MMOD_SCALE;\n  }\n\n  private random(min: number, max: number): number {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,UAAU,EAAEC,UAAU,QAAQ,aAAa;AAEpD,OAAO,MAAMC,IAAI,CAAC;EAehB;AACF;AACA;EACEC,WAAWA,CAAA,EAAG;IAjBd;IAAA,KACgBC,IAAI;IACpB;IACA;IACA;IACA;IAAA,KACgBC,YAAY;IAC5B;IACA;IAAA,KACgBC,aAAa;IAC7B;IACA;IAAA,KACgBC,WAAW;IAMzB,MAAMC,QAAQ,GAAG,IAAIT,KAAK,CAACU,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAClD,MAAMC,QAAQ,GAAG,IAAIX,KAAK,CAACY,iBAAiB,CAAC;MAC3CC,KAAK,EAAE,IAAIb,KAAK,CAACc,KAAK,CAAC,CAAC,CAACC,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAEf,KAAK,CAACgB,cAAc,CAAC;MACpEC,IAAI,EAAEjB,KAAK,CAACkB,UAAU;MACtBC,eAAe,EAAE;IACnB,CAAC,CAAC;IACF,IAAI,CAACd,IAAI,GAAG,IAAIL,KAAK,CAACoB,IAAI,CAACX,QAAQ,EAAEE,QAAQ,CAAC;;IAE9C;IACA;IACA;IACA;IACA;IACA,MAAMU,KAAK,GAAG,IAAI,CAACC,MAAM,CAAC,IAAI,EAAE,CAAC,GAAGC,IAAI,CAACC,EAAE,CAAC;IAC5C,MAAMC,GAAG,GAAGF,IAAI,CAACG,IAAI,CAAC,IAAI,CAACJ,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACzC;IACA;IACA,IAAI,CAACjB,IAAI,CAACsB,QAAQ,CAACC,CAAC,GAAG3B,UAAU,GAAGsB,IAAI,CAACM,GAAG,CAACR,KAAK,CAAC,GAAGE,IAAI,CAACO,GAAG,CAACL,GAAG,CAAC;IACnE,IAAI,CAACpB,IAAI,CAACsB,QAAQ,CAACI,CAAC,GAAG9B,UAAU,GAAGsB,IAAI,CAACO,GAAG,CAACT,KAAK,CAAC,GAAGE,IAAI,CAACO,GAAG,CAACL,GAAG,CAAC;IACnE,IAAI,CAACpB,IAAI,CAACsB,QAAQ,CAACK,CAAC,GAAG/B,UAAU,GAAGsB,IAAI,CAACM,GAAG,CAACJ,GAAG,CAAC;IACjD,IAAI,CAACpB,IAAI,CAAC4B,KAAK,CAACL,CAAC,GAAG,IAAI,CAACvB,IAAI,CAAC4B,KAAK,CAACF,CAAC,GAAG,IAAI,CAAC1B,IAAI,CAAC4B,KAAK,CAACD,CAAC,GAAG9B,UAAU;EACxE;EAEQoB,MAAMA,CAACY,GAAW,EAAEC,GAAW,EAAU;IAC/C;IACA,OAAOZ,IAAI,CAACa,KAAK,CAACb,IAAI,CAACD,MAAM,CAAC,CAAC,IAAIa,GAAG,GAAGD,GAAG,GAAG,CAAC,CAAC,GAAGA,GAAG,CAAC;EAC1D;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}