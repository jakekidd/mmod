{"ast":null,"code":"import * as THREE from \"three\";\nexport class MMOD {\n  /**\n   * A small point object representing orbiting debris.\n   */\n  constructor() {\n    this.mesh = void 0;\n    const geometry = new THREE.SphereGeometry(1, 4, 2);\n    const material = new THREE.MeshPhongMaterial({\n      color: new THREE.Color().setHSL(Math.random(), 0.5, 0.5, THREE.SRGBColorSpace),\n      side: THREE.DoubleSide,\n      alphaToCoverage: true\n    });\n    this.mesh = new THREE.Mesh(geometry, material);\n\n    // Points on the surface of a sphere can be expressed using two\n    // spherical coordinates, theta and phi with 0 < theta < 2pi and\n    // 0 < phi < pi.\n    // Generate random values for theta and phi.\n    const theta = this.random(0, 2 * Math.PI);\n    const phi = this.random(0, Math.PI);\n    // Convert theta and phi into cartesian coordinates for the mesh.\n    this.mesh.position.x = this.mesh.position.y = Math.random() * 10 - 5;\n    this.mesh.position.z = Math.random() * 10 - 5;\n    this.mesh.scale.x = this.mesh.scale.y = this.mesh.scale.z = Math.random() * 3 + 1;\n  }\n  random(min, max) {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n}","map":{"version":3,"names":["THREE","MMOD","constructor","mesh","geometry","SphereGeometry","material","MeshPhongMaterial","color","Color","setHSL","Math","random","SRGBColorSpace","side","DoubleSide","alphaToCoverage","Mesh","theta","PI","phi","position","x","y","z","scale","min","max","floor"],"sources":["/home/jake/ptolemy/mmod/packages/kepler/src/helpers/MMOD.ts"],"sourcesContent":["import * as THREE from \"three\";\n\nexport class MMOD {\n  public readonly mesh: THREE.Mesh;\n\n  /**\n   * A small point object representing orbiting debris.\n   */\n  constructor() {\n    const geometry = new THREE.SphereGeometry(1, 4, 2);\n    const material = new THREE.MeshPhongMaterial({\n      color: new THREE.Color().setHSL(\n        Math.random(),\n        0.5,\n        0.5,\n        THREE.SRGBColorSpace\n      ),\n      side: THREE.DoubleSide,\n      alphaToCoverage: true,\n    });\n    this.mesh = new THREE.Mesh(geometry, material);\n\n    // Points on the surface of a sphere can be expressed using two\n    // spherical coordinates, theta and phi with 0 < theta < 2pi and\n    // 0 < phi < pi.\n    // Generate random values for theta and phi.\n    const theta = this.random(0, 2 * Math.PI);\n    const phi = this.random(0, Math.PI);\n    // Convert theta and phi into cartesian coordinates for the mesh.\n    this.mesh.position.x = this.mesh.position.y = Math.random() * 10 - 5;\n    this.mesh.position.z = Math.random() * 10 - 5;\n    this.mesh.scale.x =\n      this.mesh.scale.y =\n      this.mesh.scale.z =\n        Math.random() * 3 + 1;\n  }\n\n  private random(min: number, max: number): number {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,OAAO,MAAMC,IAAI,CAAC;EAGhB;AACF;AACA;EACEC,WAAWA,CAAA,EAAG;IAAA,KALEC,IAAI;IAMlB,MAAMC,QAAQ,GAAG,IAAIJ,KAAK,CAACK,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAClD,MAAMC,QAAQ,GAAG,IAAIN,KAAK,CAACO,iBAAiB,CAAC;MAC3CC,KAAK,EAAE,IAAIR,KAAK,CAACS,KAAK,CAAC,CAAC,CAACC,MAAM,CAC7BC,IAAI,CAACC,MAAM,CAAC,CAAC,EACb,GAAG,EACH,GAAG,EACHZ,KAAK,CAACa,cACR,CAAC;MACDC,IAAI,EAAEd,KAAK,CAACe,UAAU;MACtBC,eAAe,EAAE;IACnB,CAAC,CAAC;IACF,IAAI,CAACb,IAAI,GAAG,IAAIH,KAAK,CAACiB,IAAI,CAACb,QAAQ,EAAEE,QAAQ,CAAC;;IAE9C;IACA;IACA;IACA;IACA,MAAMY,KAAK,GAAG,IAAI,CAACN,MAAM,CAAC,CAAC,EAAE,CAAC,GAAGD,IAAI,CAACQ,EAAE,CAAC;IACzC,MAAMC,GAAG,GAAG,IAAI,CAACR,MAAM,CAAC,CAAC,EAAED,IAAI,CAACQ,EAAE,CAAC;IACnC;IACA,IAAI,CAAChB,IAAI,CAACkB,QAAQ,CAACC,CAAC,GAAG,IAAI,CAACnB,IAAI,CAACkB,QAAQ,CAACE,CAAC,GAAGZ,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC;IACpE,IAAI,CAACT,IAAI,CAACkB,QAAQ,CAACG,CAAC,GAAGb,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC;IAC7C,IAAI,CAACT,IAAI,CAACsB,KAAK,CAACH,CAAC,GACf,IAAI,CAACnB,IAAI,CAACsB,KAAK,CAACF,CAAC,GACjB,IAAI,CAACpB,IAAI,CAACsB,KAAK,CAACD,CAAC,GACfb,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;EAC3B;EAEQA,MAAMA,CAACc,GAAW,EAAEC,GAAW,EAAU;IAC/C;IACA,OAAOhB,IAAI,CAACiB,KAAK,CAACjB,IAAI,CAACC,MAAM,CAAC,CAAC,IAAIe,GAAG,GAAGD,GAAG,GAAG,CAAC,CAAC,GAAGA,GAAG,CAAC;EAC1D;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}