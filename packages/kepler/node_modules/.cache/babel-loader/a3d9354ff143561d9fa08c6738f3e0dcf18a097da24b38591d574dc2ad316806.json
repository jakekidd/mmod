{"ast":null,"code":"import * as THREE from \"three\";\nimport { LEO_RADIUS, MMOD_SCALE } from \"../helpers/Constants\";\nexport class MMOD {\n  // Revolution number (typically at a given epoch) is just\n  // a counter, again normally tracked by\n  // This will not be tracked here.\n\n  /**\n   * A small point object representing orbiting debris.\n   */\n  constructor() {\n    // The three js object to be rendered.\n    this.mesh = void 0;\n    // TODO: Think on this one.\n    // Normally, a sequential nine-digit number assigned by the\n    // USSPACECOM in order of launch or discovery.\n    this.satelliteCatalogNumber = 0;\n    // Keplerian orbital elements, plus some others used in\n    // producing the TLE representation.\n    // See: https://en.wikipedia.org/wiki/Orbital_elements\n    // Semi-major axis is the sum of the periapsis and apoapsis\n    // distances divided by two.\n    // public semiMajorAxis: number;\n    // Inclination is the vertical tilt of the ellipse with\n    // respect to the reference plane.\n    this.inclination = void 0;\n    // The right ascension of the ascending node is the angle\n    // from a specified reference direction, called the origin\n    // of longitude, to the direction of the ascending node.\n    this.longitude = void 0;\n    // Eccentricity represents the shape of the orbital ellipse,\n    // describing how much it is elongated compared to a circle.\n    this.eccentricity = void 0;\n    // The argument of perigee is, parametrically, the angle\n    // from the body's ascending node to its periapsis, measured\n    // in the direction of motion.\n    this.perigee = void 0;\n    // Mean motion is revolutions per day.\n    this.motion = void 0;\n    // Mean anomaly is the fraction of an elliptical orbit's\n    // period that has elapsed since the orbiting body passed\n    // periapsis.\n    this.anomaly = void 0;\n    const geometry = new THREE.SphereGeometry(1, 1, 1);\n    const material = new THREE.MeshPhongMaterial({\n      color: new THREE.Color().setHSL(0.9, 0.9, 0.9, THREE.SRGBColorSpace),\n      side: THREE.DoubleSide,\n      alphaToCoverage: true\n    });\n    this.mesh = new THREE.Mesh(geometry, material);\n\n    // Determine the initial position of the MMOD at random.\n    // Points on the surface of a sphere can be expressed using two\n    // spherical coordinates, theta and phi with 0 < theta < 2pi and\n    // 0 < phi < pi.\n    // Generate random values for theta and phi.\n    const theta = this.random(0.01, 2 * Math.PI);\n    const phi = Math.acos(this.random(-1, 1));\n    // TODO: Vary the radius slightly.\n    // Convert theta and phi into cartesian coordinates for the mesh.\n    this.mesh.position.x = LEO_RADIUS * Math.cos(theta) * Math.sin(phi);\n    this.mesh.position.y = LEO_RADIUS * Math.sin(theta) * Math.sin(phi);\n    this.mesh.position.z = LEO_RADIUS * Math.cos(phi);\n    this.mesh.scale.x = this.mesh.scale.y = this.mesh.scale.z = MMOD_SCALE;\n\n    // Set mean motion at random.\n    // Initial speed (scalar) should be anywhere from 6-9 km/s.\n    const initialSpeed = this.random(6000, 9000); // In m/s.\n    // Convert this to approximate (non-elliptical) revolutions per day.\n    const circumference = 46357.341; // 2pi * 7378 (mean LEO).\n    const dayDistanceTraveled = initialSpeed * 86400; // Seconds in a day.\n    this.motion = dayDistanceTraveled / circumference;\n\n    // Set inclination at random.\n    this.inclination = this.random(40.0, 60.0);\n\n    // Set eccentricity at random.\n    this.eccentricity = this.random(0.0, 0.0009);\n\n    // Set argument of perigee at random.\n    this.perigee = this.random(100.0, 150.0);\n\n    // Set mean anomaly at random.\n    this.anomaly = this.random(300.0, 350.0);\n\n    // Set longitude at random.\n    this.longitude = this.random(200, 300);\n  }\n\n  /**\n   * Proceed to the next animation frame. Reposition the\n   * @param t Time in seconds since init. It's assumed that we init at 0.\n   */\n  step(t) {}\n  random(min, max) {\n    // min and max included\n    return Math.random() * (max - min + 1) + min;\n  }\n}","map":{"version":3,"names":["THREE","LEO_RADIUS","MMOD_SCALE","MMOD","constructor","mesh","satelliteCatalogNumber","inclination","longitude","eccentricity","perigee","motion","anomaly","geometry","SphereGeometry","material","MeshPhongMaterial","color","Color","setHSL","SRGBColorSpace","side","DoubleSide","alphaToCoverage","Mesh","theta","random","Math","PI","phi","acos","position","x","cos","sin","y","z","scale","initialSpeed","circumference","dayDistanceTraveled","step","t","min","max"],"sources":["/home/jake/ptolemy/mmod/packages/kepler/src/demo/MMOD.ts"],"sourcesContent":["import * as THREE from \"three\";\nimport { LEO_RADIUS, MMOD_SCALE } from \"../helpers/Constants\";\n\nexport class MMOD {\n  // The three js object to be rendered.\n  public readonly mesh: THREE.Mesh;\n\n  // TODO: Think on this one.\n  // Normally, a sequential nine-digit number assigned by the\n  // USSPACECOM in order of launch or discovery.\n  public satelliteCatalogNumber = 0;\n\n  // Keplerian orbital elements, plus some others used in\n  // producing the TLE representation.\n  // See: https://en.wikipedia.org/wiki/Orbital_elements\n  // Semi-major axis is the sum of the periapsis and apoapsis\n  // distances divided by two.\n  // public semiMajorAxis: number;\n  // Inclination is the vertical tilt of the ellipse with\n  // respect to the reference plane.\n  public inclination: number;\n  // The right ascension of the ascending node is the angle\n  // from a specified reference direction, called the origin\n  // of longitude, to the direction of the ascending node.\n  public longitude: number;\n  // Eccentricity represents the shape of the orbital ellipse,\n  // describing how much it is elongated compared to a circle.\n  public eccentricity: number;\n  // The argument of perigee is, parametrically, the angle\n  // from the body's ascending node to its periapsis, measured\n  // in the direction of motion.\n  public perigee: number;\n  // Mean motion is revolutions per day.\n  public motion: number;\n  // Mean anomaly is the fraction of an elliptical orbit's\n  // period that has elapsed since the orbiting body passed\n  // periapsis.\n  public anomaly: number;\n  // Revolution number (typically at a given epoch) is just\n  // a counter, again normally tracked by\n  // This will not be tracked here.\n\n  /**\n   * A small point object representing orbiting debris.\n   */\n  constructor() {\n    const geometry = new THREE.SphereGeometry(1, 1, 1);\n    const material = new THREE.MeshPhongMaterial({\n      color: new THREE.Color().setHSL(0.9, 0.9, 0.9, THREE.SRGBColorSpace),\n      side: THREE.DoubleSide,\n      alphaToCoverage: true,\n    });\n    this.mesh = new THREE.Mesh(geometry, material);\n\n    // Determine the initial position of the MMOD at random.\n    // Points on the surface of a sphere can be expressed using two\n    // spherical coordinates, theta and phi with 0 < theta < 2pi and\n    // 0 < phi < pi.\n    // Generate random values for theta and phi.\n    const theta = this.random(0.01, 2 * Math.PI);\n    const phi = Math.acos(this.random(-1, 1));\n    // TODO: Vary the radius slightly.\n    // Convert theta and phi into cartesian coordinates for the mesh.\n    this.mesh.position.x = LEO_RADIUS * Math.cos(theta) * Math.sin(phi);\n    this.mesh.position.y = LEO_RADIUS * Math.sin(theta) * Math.sin(phi);\n    this.mesh.position.z = LEO_RADIUS * Math.cos(phi);\n    this.mesh.scale.x = this.mesh.scale.y = this.mesh.scale.z = MMOD_SCALE;\n\n    // Set mean motion at random.\n    // Initial speed (scalar) should be anywhere from 6-9 km/s.\n    const initialSpeed = this.random(6000, 9000); // In m/s.\n    // Convert this to approximate (non-elliptical) revolutions per day.\n    const circumference = 46357.341; // 2pi * 7378 (mean LEO).\n    const dayDistanceTraveled = initialSpeed * 86400; // Seconds in a day.\n    this.motion = dayDistanceTraveled / circumference;\n\n    // Set inclination at random.\n    this.inclination = this.random(40.0, 60.0);\n\n    // Set eccentricity at random.\n    this.eccentricity = this.random(0.0, 0.0009);\n\n    // Set argument of perigee at random.\n    this.perigee = this.random(100.0, 150.0);\n\n    // Set mean anomaly at random.\n    this.anomaly = this.random(300.0, 350.0);\n\n    // Set longitude at random.\n    this.longitude = this.random(200, 300);\n  }\n\n  /**\n   * Proceed to the next animation frame. Reposition the\n   * @param t Time in seconds since init. It's assumed that we init at 0.\n   */\n  private step(t: number): void {}\n\n  private random(min: number, max: number): number {\n    // min and max included\n    return Math.random() * (max - min + 1) + min;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}