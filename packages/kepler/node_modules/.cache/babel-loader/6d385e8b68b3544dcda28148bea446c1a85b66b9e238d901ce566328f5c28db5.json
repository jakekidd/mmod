{"ast":null,"code":"import * as THREE from \"three\";\nimport { LEO_RADIUS, MMOD_SCALE } from \"../helpers/Constants\";\nexport class MMOD {\n  /**\n   * A small point object representing orbiting debris.\n   */\n  constructor() {\n    // The three js object to be rendered.\n    this.mesh = void 0;\n    // TODO: Think on this one.\n    // Normally, a sequential nine-digit number assigned by the\n    // USSPACECOM in order of launch or discovery.\n    this.satelliteCatalogNumber = 0;\n    // Keplerian orbital elements, plus some others used in\n    // producing the TLE representation.\n    // See: https://en.wikipedia.org/wiki/Orbital_elements\n    // Semi-major axis is the sum of the periapsis and apoapsis\n    // distances divided by two.\n    // public semiMajorAxis: number;\n    // Inclination is the vertical tilt of the ellipse with\n    // respect to the reference plane.\n    this.inclination = void 0;\n    // The right ascension of the ascending node is the angle\n    // from a specified reference direction, called the origin\n    // of longitude, to the direction of the ascending node.\n    this.longitude = void 0;\n    // Eccentricity represents the shape of the orbital ellipse,\n    // describing how much it is elongated compared to a circle.\n    this.eccentricity = void 0;\n    // The argument of perigee is, parametrically, the angle\n    // from the body's ascending node to its periapsis, measured\n    // in the direction of motion.\n    this.perigee = void 0;\n    // Mean motion is revolutions per day.\n    this.motion = void 0;\n    // Mean anomaly is the fraction of an elliptical orbit's\n    // period that has elapsed since the orbiting body passed\n    // periapsis.\n    this.anomaly = void 0;\n    // TODO: Again, think on this. Could be prohibitive, but\n    // maybe we can exclude from target consensus data model?\n    // Revolution number (typically at a given epoch) is just\n    // a counter, again normally tracked by\n    // This will not be tracked here.\n    this.revolution = 1;\n    // Will leave this at unclassified for now.\n    this.classification = \"U\";\n    // Variables used to calculate the ballistic coefficient.\n    this.mass = void 0;\n    // In grams.\n    this.diameter = void 0;\n    // In meters.\n    this.drag = 0.47;\n    // Drag coefficient of a sphere.\n    this.density = 7850.0;\n    const geometry = new THREE.SphereGeometry(1, 1, 1);\n    const material = new THREE.MeshPhongMaterial({\n      color: new THREE.Color().setHSL(0.9, 0.9, 0.9, THREE.SRGBColorSpace),\n      side: THREE.DoubleSide,\n      alphaToCoverage: true\n    });\n    this.mesh = new THREE.Mesh(geometry, material);\n\n    // Determine the initial position of the MMOD at random.\n    // Points on the surface of a sphere can be expressed using two\n    // spherical coordinates, theta and phi with 0 < theta < 2pi and\n    // 0 < phi < pi.\n    // Generate random values for theta and phi.\n    const theta = this.random(0.01, 2 * Math.PI);\n    const phi = Math.acos(this.random(-1, 1));\n    // TODO: Vary the radius slightly.\n    // Convert theta and phi into cartesian coordinates for the mesh.\n    this.mesh.position.x = LEO_RADIUS * Math.cos(theta) * Math.sin(phi);\n    this.mesh.position.y = LEO_RADIUS * Math.sin(theta) * Math.sin(phi);\n    this.mesh.position.z = LEO_RADIUS * Math.cos(phi);\n    this.mesh.scale.x = this.mesh.scale.y = this.mesh.scale.z = MMOD_SCALE;\n\n    // Set mean motion at random.\n    // Initial speed (scalar) should be anywhere from 6-9 km/s.\n    const initialSpeed = this.random(6000, 9000); // In m/s.\n    // Convert this to approximate (non-elliptical) revolutions per day.\n    const circumference = 46357.341; // 2pi * 7378 (mean LEO).\n    const dayDistanceTraveled = initialSpeed * 86400; // Seconds in a day.\n    this.motion = dayDistanceTraveled / circumference;\n\n    // Set inclination at random.\n    this.inclination = this.random(40.0, 60.0);\n\n    // Set eccentricity at random.\n    this.eccentricity = this.random(0.0, 0.0009);\n\n    // Set argument of perigee at random.\n    this.perigee = this.random(100.0, 150.0);\n\n    // Set mean anomaly at random.\n    this.anomaly = this.random(300.0, 350.0);\n\n    // Set longitude at random.\n    this.longitude = this.random(200, 300);\n\n    // Set mass, diameter at random.\n    this.mass = this.random(200, 500);\n    this.diameter = this.random(0.1, 0.3);\n  }\n\n  /**\n   * Proceed to the next animation frame. Reposition the\n   * @param t Time in seconds since init. It's assumed that we init at 0.\n   */\n  step(t) {}\n  tle(timestamp) {\n    const tle = [Array(69).fill(\"\\xa0\"), Array(69).fill(\"\\xa0\")];\n\n    /// LINE 1\n    // Line number.\n    tle[0].splice(0, 1, \"1\");\n\n    // TODO: Check if this should be 0-padded.\n    // Satellite catalog number. This is space junk, so probably zero.\n    tle[0].splice(2, 5, ...this.pad(this.satelliteCatalogNumber, 5).split(\"\"));\n\n    // Append classification.\n    tle[0].splice(7, 1, this.classification);\n\n    // Append international designator, the launch year etc., not relevant.\n    tle[0].splice(9, 6, \"0\", \"0\", \"0\", \"0\", \"0\", \"A\");\n\n    // Append epoch to the first line.\n    // Epoch year, the last two digits of year.\n    tle[0].splice(18, 2, ...timestamp.getFullYear().toString().slice(2, 4).split(\"\"));\n    // Epoch day of the year and fractional portion of the day.\n    const day = this.pad(this.getDayOfYear(timestamp), 3);\n    const fraction = this.getFractionalPortionOfDay(timestamp).toString().substring(1, 10); // Removes 0 from beginning and truncates.\n    tle[0].splice(20, 12, ...(day + fraction).split(\"\"));\n\n    // TODO: Should be first derivative of mean motion?\n    // Append ballistic coefficient.\n    tle[0].splice(33, 10, \"-\", ...this.getBallisticCoefficient().toString().substring(1, 9).split(\"\"));\n    // TODO: Append second derivative of mean motion.\n    // Leaving at 0 for now.\n    tle[0].splice(44, 8, \"\\xa0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"-\", \"0\");\n\n    // TODO: Am I doing this right?\n    // Append BSTAR.\n    const BSTAR = this.getBSTAR();\n    let BSTARString = BSTAR.toString().substring(BSTAR < 0 ? 3 : 2, BSTAR < 0 ? 8 : 7);\n    BSTARString = BSTARString.substring(0, 5) + \"-\" + BSTARString.substring(6);\n    tle[0].splice(53, 7, \"-\", ...BSTARString.split(\"\"));\n\n    // Append ephemeris type. Supposedly always zero.\n    tle[0].splice(62, 1, \"0\");\n\n    // TODO: Is there any reason to actually track this?\n    // Element set number, incremented when a new TLE is generated for this object. Will leave at 1.\n    tle[0].splice(64, 3, \"001\");\n\n    // TODO: How to do this? Encode first, or..?\n    // Calculate and append the checksum.\n    tle[0].splice(68, 1, \"0\");\n\n    /// LINE 2\n    // Line number.\n    tle[1].splice(0, 1, \"2\");\n\n    // Again, satellite catalog number.\n    tle[1].splice(2, 5, ...this.pad(this.satelliteCatalogNumber, 5).split(\"\"));\n\n    // Append inclination.\n    tle[1].splice(8, 6, ...this.pad(this.inclination, 7, true).substring(0, 7).split(\"\"));\n\n    // Append longitude.\n    tle[1].splice(17, 8, ...this.pad(this.longitude, 8, true).substring(0, 8).split(\"\"));\n\n    // Append eccentricity.\n    tle[1].splice(26, 7, ...this.eccentricity.toString().substring(2, 10).split(\"\"));\n\n    // Append argument of perigee.\n    tle[1].splice(34, 8, ...this.pad(this.perigee, 8, true).substring(0, 8).split(\"\"));\n\n    // Append mean anomaly.\n    tle[1].splice(43, 8, ...this.pad(this.anomaly, 8, true).substring(0, 8).split(\"\"));\n\n    // Append mean motion.\n    let extendedMotion = this.pad(this.motion, this.motion >= 10 ? 11 : 10, true);\n    if (this.motion <= 10) {\n      extendedMotion = this.pad(parseInt(extendedMotion), 11);\n    }\n    tle[1].splice(52, 11, ...extendedMotion.substring(0, 12).split(\"\"));\n\n    // Append revolution number.\n    tle[1].splice(63, 5, ...this.pad(this.revolution, 5).split(\"\"));\n\n    // TODO: How to do this? Encode first, or..?\n    // Calculate and append the checksum.\n    tle[1].splice(68, 1, \"0\");\n    return [tle[0].join(\"\"), tle[1].join(\"\")];\n  }\n  getBSTAR() {\n    // TODO: Cross-sectional != frontal area.\n    // Should be expressed as spherical cap?\n    const B = this.drag * this.getCrossSectionalArea() / this.mass;\n    return this.density * B / 2;\n  }\n  getBallisticCoefficient() {\n    return this.mass / (this.drag * this.getCrossSectionalArea());\n  }\n  getCrossSectionalArea() {\n    return Math.PI * (this.diameter / 2) ** 2;\n  }\n  getVolume() {\n    return 4 / 3 * Math.PI * Math.pow(this.diameter / 2, 3);\n  }\n  getFractionalPortionOfDay(date) {\n    const beginningOfDay = new Date(date);\n    beginningOfDay.setUTCHours(0, 0, 0, 0);\n    const msElapsed = date.getUTCMilliseconds() - beginningOfDay.getUTCMilliseconds();\n    return msElapsed / 8.64e7;\n  }\n  getDayOfYear(date) {\n    const beginningOfYear = new Date();\n    beginningOfYear.setUTCHours(0, 0, 0, 0);\n    beginningOfYear.setUTCDate(0);\n    beginningOfYear.setUTCMonth(0);\n    const secondsIntoYear = date.getUTCSeconds() - beginningOfYear.getUTCSeconds();\n    return Math.floor(secondsIntoYear / 86400);\n  }\n  pad(num, size, reverse = false) {\n    let s = num.toString();\n    while (s.length < size) {\n      s = reverse ? s + \"0\" : \"0\" + s;\n    }\n    return s;\n  }\n  random(min, max) {\n    // min and max included\n    return Math.random() * (max - min + 1) + min;\n  }\n}","map":{"version":3,"names":["THREE","LEO_RADIUS","MMOD_SCALE","MMOD","constructor","mesh","satelliteCatalogNumber","inclination","longitude","eccentricity","perigee","motion","anomaly","revolution","classification","mass","diameter","drag","density","geometry","SphereGeometry","material","MeshPhongMaterial","color","Color","setHSL","SRGBColorSpace","side","DoubleSide","alphaToCoverage","Mesh","theta","random","Math","PI","phi","acos","position","x","cos","sin","y","z","scale","initialSpeed","circumference","dayDistanceTraveled","step","t","tle","timestamp","Array","fill","splice","pad","split","getFullYear","toString","slice","day","getDayOfYear","fraction","getFractionalPortionOfDay","substring","getBallisticCoefficient","BSTAR","getBSTAR","BSTARString","extendedMotion","parseInt","join","B","getCrossSectionalArea","getVolume","pow","date","beginningOfDay","Date","setUTCHours","msElapsed","getUTCMilliseconds","beginningOfYear","setUTCDate","setUTCMonth","secondsIntoYear","getUTCSeconds","floor","num","size","reverse","s","length","min","max"],"sources":["/home/jake/ptolemy/mmod/packages/kepler/src/demo/MMOD.ts"],"sourcesContent":["import * as THREE from \"three\";\nimport { LEO_RADIUS, MMOD_SCALE } from \"../helpers/Constants\";\n\nexport type TLE = [string, string];\n\nexport class MMOD {\n  // The three js object to be rendered.\n  public readonly mesh: THREE.Mesh;\n\n  // TODO: Think on this one.\n  // Normally, a sequential nine-digit number assigned by the\n  // USSPACECOM in order of launch or discovery.\n  public satelliteCatalogNumber = 0;\n\n  // Keplerian orbital elements, plus some others used in\n  // producing the TLE representation.\n  // See: https://en.wikipedia.org/wiki/Orbital_elements\n  // Semi-major axis is the sum of the periapsis and apoapsis\n  // distances divided by two.\n  // public semiMajorAxis: number;\n  // Inclination is the vertical tilt of the ellipse with\n  // respect to the reference plane.\n  public inclination: number;\n  // The right ascension of the ascending node is the angle\n  // from a specified reference direction, called the origin\n  // of longitude, to the direction of the ascending node.\n  public longitude: number;\n  // Eccentricity represents the shape of the orbital ellipse,\n  // describing how much it is elongated compared to a circle.\n  public eccentricity: number;\n  // The argument of perigee is, parametrically, the angle\n  // from the body's ascending node to its periapsis, measured\n  // in the direction of motion.\n  public perigee: number;\n  // Mean motion is revolutions per day.\n  public motion: number;\n  // Mean anomaly is the fraction of an elliptical orbit's\n  // period that has elapsed since the orbiting body passed\n  // periapsis.\n  public anomaly: number;\n  // TODO: Again, think on this. Could be prohibitive, but\n  // maybe we can exclude from target consensus data model?\n  // Revolution number (typically at a given epoch) is just\n  // a counter, again normally tracked by\n  // This will not be tracked here.\n  public revolution = 1;\n  // Will leave this at unclassified for now.\n  public classification: \"U\" | \"C\" | \"S\" = \"U\";\n\n  // Variables used to calculate the ballistic coefficient.\n  public mass: number; // In grams.\n  public diameter: number; // In meters.\n  public drag = 0.47; // Drag coefficient of a sphere.\n  public density = 7850.0;\n\n  /**\n   * A small point object representing orbiting debris.\n   */\n  constructor() {\n    const geometry = new THREE.SphereGeometry(1, 1, 1);\n    const material = new THREE.MeshPhongMaterial({\n      color: new THREE.Color().setHSL(0.9, 0.9, 0.9, THREE.SRGBColorSpace),\n      side: THREE.DoubleSide,\n      alphaToCoverage: true,\n    });\n    this.mesh = new THREE.Mesh(geometry, material);\n\n    // Determine the initial position of the MMOD at random.\n    // Points on the surface of a sphere can be expressed using two\n    // spherical coordinates, theta and phi with 0 < theta < 2pi and\n    // 0 < phi < pi.\n    // Generate random values for theta and phi.\n    const theta = this.random(0.01, 2 * Math.PI);\n    const phi = Math.acos(this.random(-1, 1));\n    // TODO: Vary the radius slightly.\n    // Convert theta and phi into cartesian coordinates for the mesh.\n    this.mesh.position.x = LEO_RADIUS * Math.cos(theta) * Math.sin(phi);\n    this.mesh.position.y = LEO_RADIUS * Math.sin(theta) * Math.sin(phi);\n    this.mesh.position.z = LEO_RADIUS * Math.cos(phi);\n    this.mesh.scale.x = this.mesh.scale.y = this.mesh.scale.z = MMOD_SCALE;\n\n    // Set mean motion at random.\n    // Initial speed (scalar) should be anywhere from 6-9 km/s.\n    const initialSpeed = this.random(6000, 9000); // In m/s.\n    // Convert this to approximate (non-elliptical) revolutions per day.\n    const circumference = 46357.341; // 2pi * 7378 (mean LEO).\n    const dayDistanceTraveled = initialSpeed * 86400; // Seconds in a day.\n    this.motion = dayDistanceTraveled / circumference;\n\n    // Set inclination at random.\n    this.inclination = this.random(40.0, 60.0);\n\n    // Set eccentricity at random.\n    this.eccentricity = this.random(0.0, 0.0009);\n\n    // Set argument of perigee at random.\n    this.perigee = this.random(100.0, 150.0);\n\n    // Set mean anomaly at random.\n    this.anomaly = this.random(300.0, 350.0);\n\n    // Set longitude at random.\n    this.longitude = this.random(200, 300);\n\n    // Set mass, diameter at random.\n    this.mass = this.random(200, 500);\n    this.diameter = this.random(0.1, 0.3);\n  }\n\n  /**\n   * Proceed to the next animation frame. Reposition the\n   * @param t Time in seconds since init. It's assumed that we init at 0.\n   */\n  public step(t: number): void {}\n\n  public tle(timestamp: Date): TLE {\n    const tle = [Array(69).fill(\"\\xa0\"), Array(69).fill(\"\\xa0\")];\n\n    /// LINE 1\n    // Line number.\n    tle[0].splice(0, 1, \"1\");\n\n    // TODO: Check if this should be 0-padded.\n    // Satellite catalog number. This is space junk, so probably zero.\n    tle[0].splice(2, 5, ...this.pad(this.satelliteCatalogNumber, 5).split(\"\"));\n\n    // Append classification.\n    tle[0].splice(7, 1, this.classification);\n\n    // Append international designator, the launch year etc., not relevant.\n    tle[0].splice(9, 6, \"0\", \"0\", \"0\", \"0\", \"0\", \"A\");\n\n    // Append epoch to the first line.\n    // Epoch year, the last two digits of year.\n    tle[0].splice(\n      18,\n      2,\n      ...timestamp.getFullYear().toString().slice(2, 4).split(\"\")\n    );\n    // Epoch day of the year and fractional portion of the day.\n    const day = this.pad(this.getDayOfYear(timestamp), 3);\n    const fraction = this.getFractionalPortionOfDay(timestamp)\n      .toString()\n      .substring(1, 10); // Removes 0 from beginning and truncates.\n    tle[0].splice(20, 12, ...(day + fraction).split(\"\"));\n\n    // TODO: Should be first derivative of mean motion?\n    // Append ballistic coefficient.\n    tle[0].splice(\n      33,\n      10,\n      \"-\",\n      ...this.getBallisticCoefficient().toString().substring(1, 9).split(\"\")\n    );\n    // TODO: Append second derivative of mean motion.\n    // Leaving at 0 for now.\n    tle[0].splice(44, 8, \"\\xa0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"-\", \"0\");\n\n    // TODO: Am I doing this right?\n    // Append BSTAR.\n    const BSTAR = this.getBSTAR();\n    let BSTARString = BSTAR.toString().substring(\n      BSTAR < 0 ? 3 : 2,\n      BSTAR < 0 ? 8 : 7\n    );\n    BSTARString = BSTARString.substring(0, 5) + \"-\" + BSTARString.substring(6);\n    tle[0].splice(53, 7, \"-\", ...BSTARString.split(\"\"));\n\n    // Append ephemeris type. Supposedly always zero.\n    tle[0].splice(62, 1, \"0\");\n\n    // TODO: Is there any reason to actually track this?\n    // Element set number, incremented when a new TLE is generated for this object. Will leave at 1.\n    tle[0].splice(64, 3, \"001\");\n\n    // TODO: How to do this? Encode first, or..?\n    // Calculate and append the checksum.\n    tle[0].splice(68, 1, \"0\");\n\n    /// LINE 2\n    // Line number.\n    tle[1].splice(0, 1, \"2\");\n\n    // Again, satellite catalog number.\n    tle[1].splice(2, 5, ...this.pad(this.satelliteCatalogNumber, 5).split(\"\"));\n\n    // Append inclination.\n    tle[1].splice(\n      8,\n      6,\n      ...this.pad(this.inclination, 7, true).substring(0, 7).split(\"\")\n    );\n\n    // Append longitude.\n    tle[1].splice(\n      17,\n      8,\n      ...this.pad(this.longitude, 8, true).substring(0, 8).split(\"\")\n    );\n\n    // Append eccentricity.\n    tle[1].splice(\n      26,\n      7,\n      ...this.eccentricity.toString().substring(2, 10).split(\"\")\n    );\n\n    // Append argument of perigee.\n    tle[1].splice(\n      34,\n      8,\n      ...this.pad(this.perigee, 8, true).substring(0, 8).split(\"\")\n    );\n\n    // Append mean anomaly.\n    tle[1].splice(\n      43,\n      8,\n      ...this.pad(this.anomaly, 8, true).substring(0, 8).split(\"\")\n    );\n\n    // Append mean motion.\n    let extendedMotion = this.pad(\n      this.motion,\n      this.motion >= 10 ? 11 : 10,\n      true\n    );\n    if (this.motion <= 10) {\n      extendedMotion = this.pad(parseInt(extendedMotion), 11);\n    }\n    tle[1].splice(52, 11, ...extendedMotion.substring(0, 12).split(\"\"));\n\n    // Append revolution number.\n    tle[1].splice(63, 5, ...this.pad(this.revolution, 5).split(\"\"));\n\n    // TODO: How to do this? Encode first, or..?\n    // Calculate and append the checksum.\n    tle[1].splice(68, 1, \"0\");\n\n    return [tle[0].join(\"\"), tle[1].join(\"\")];\n  }\n\n  private getBSTAR(): number {\n    // TODO: Cross-sectional != frontal area.\n    // Should be expressed as spherical cap?\n    const B = (this.drag * this.getCrossSectionalArea()) / this.mass;\n    return (this.density * B) / 2;\n  }\n\n  private getBallisticCoefficient(): number {\n    return this.mass / (this.drag * this.getCrossSectionalArea());\n  }\n\n  private getCrossSectionalArea(): number {\n    return Math.PI * (this.diameter / 2) ** 2;\n  }\n\n  private getVolume(): number {\n    return (4 / 3) * Math.PI * Math.pow(this.diameter / 2, 3);\n  }\n\n  private getFractionalPortionOfDay(date: Date): number {\n    const beginningOfDay = new Date(date);\n    beginningOfDay.setUTCHours(0, 0, 0, 0);\n    const msElapsed =\n      date.getUTCMilliseconds() - beginningOfDay.getUTCMilliseconds();\n    return msElapsed / 8.64e7;\n  }\n\n  private getDayOfYear(date: Date): number {\n    const beginningOfYear = new Date();\n    beginningOfYear.setUTCHours(0, 0, 0, 0);\n    beginningOfYear.setUTCDate(0);\n    beginningOfYear.setUTCMonth(0);\n\n    const secondsIntoYear =\n      date.getUTCSeconds() - beginningOfYear.getUTCSeconds();\n    return Math.floor(secondsIntoYear / 86400);\n  }\n\n  private pad(num: number, size: number, reverse: boolean = false): string {\n    let s = num.toString();\n    while (s.length < size) {\n      s = reverse ? s + \"0\" : \"0\" + s;\n    }\n    return s;\n  }\n\n  private random(min: number, max: number): number {\n    // min and max included\n    return Math.random() * (max - min + 1) + min;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}