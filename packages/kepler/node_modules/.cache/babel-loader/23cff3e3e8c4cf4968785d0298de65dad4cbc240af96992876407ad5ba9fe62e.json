{"ast":null,"code":"var _jsxFileName = \"/home/jake/ptolemy/mmod/packages/kepler/src/Kepler.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport \"./Kepler.css\";\nimport * as THREE from \"three\";\nimport { GUI } from \"three/examples/jsm/libs/lil-gui.module.min.js\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GUI_PARAMS = {\n  showHelpers: true,\n  alphaToCoverage: true\n};\nfunction Kepler() {\n  _s();\n  // Main components of the three.js nested web GL process.\n  let renderer;\n  let scene;\n  let camera;\n  // Whether or not the three.js canvas renderer and scene have been initialized.\n  // Note that we do not use state here, as we just want to prevent redundant init\n  // calls in useEffect.\n  let initialized = false;\n  useEffect(init, []);\n  function init() {\n    // Check whether initialized.\n    if (initialized) {\n      return;\n    }\n    initialized = true;\n\n    // Init the three.js WebGLRenderer, which will draw the scene on the canvas.\n    renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.localClippingEnabled = true;\n    document.body.appendChild(renderer.domElement);\n\n    // Init scene, which holds objects for rendering.\n    scene = new THREE.Scene();\n\n    // Init camera\n    camera = new THREE.PerspectiveCamera(40, window.innerWidth / window.innerHeight, 1, 200);\n    camera.position.set(-1.5, 2.5, 3.0);\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.addEventListener(\"change\", render); // use only if there is no animation loop\n    controls.minDistance = 1;\n    controls.maxDistance = 10;\n    controls.enablePan = false;\n    const light = new THREE.HemisphereLight(0xffffff, 0x080808, 4.5);\n    light.position.set(-1.25, 1, 1.25);\n    scene.add(light);\n\n    // Create an earth sphere around which our MMODs will be orbit.\n    const earthGroup = new THREE.Group();\n    for (let i = 1; i <= 30; i += 2) {\n      const geometry = new THREE.SphereGeometry(i / 30, 48, 24);\n      const material = new THREE.MeshPhongMaterial({\n        color: new THREE.Color().setHSL(Math.random(), 0.5, 0.5, THREE.SRGBColorSpace),\n        side: THREE.DoubleSide,\n        alphaToCoverage: true\n      });\n      earthGroup.add(new THREE.Mesh(geometry, material));\n    }\n    scene.add(earthGroup);\n    const mmods = new THREE.Group();\n    const gui = new GUI();\n    gui.add(GUI_PARAMS, \"alphaToCoverage\").onChange(function (value) {\n      earthGroup.children.forEach(c => {\n        c.material.alphaToCoverage = Boolean(value);\n        c.material.needsUpdate = true;\n      });\n      render();\n    });\n\n    // Add a window event listener that will fire when the browser window is resized.\n    window.addEventListener(\"resize\", onWindowResize);\n  }\n  function onWindowResize() {\n    // Set the ratio of the camera's aspect to match the browser window size.\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    render();\n  }\n  function render() {\n    renderer.render(scene, camera);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"kepler\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 10\n  }, this);\n}\n_s(Kepler, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Kepler;\nexport default Kepler;\nvar _c;\n$RefreshReg$(_c, \"Kepler\");","map":{"version":3,"names":["React","useEffect","THREE","GUI","OrbitControls","jsxDEV","_jsxDEV","GUI_PARAMS","showHelpers","alphaToCoverage","Kepler","_s","renderer","scene","camera","initialized","init","WebGLRenderer","antialias","setPixelRatio","window","devicePixelRatio","setSize","innerWidth","innerHeight","localClippingEnabled","document","body","appendChild","domElement","Scene","PerspectiveCamera","position","set","controls","addEventListener","render","minDistance","maxDistance","enablePan","light","HemisphereLight","add","earthGroup","Group","i","geometry","SphereGeometry","material","MeshPhongMaterial","color","Color","setHSL","Math","random","SRGBColorSpace","side","DoubleSide","Mesh","mmods","gui","onChange","value","children","forEach","c","Boolean","needsUpdate","onWindowResize","aspect","updateProjectionMatrix","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/jake/ptolemy/mmod/packages/kepler/src/Kepler.tsx"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport \"./Kepler.css\";\nimport * as THREE from \"three\";\nimport { GUI } from \"three/examples/jsm/libs/lil-gui.module.min.js\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nconst GUI_PARAMS = {\n  showHelpers: true,\n  alphaToCoverage: true,\n};\n\nfunction Kepler() {\n  // Main components of the three.js nested web GL process.\n  let renderer: THREE.WebGLRenderer;\n  let scene: THREE.Scene;\n  let camera: THREE.PerspectiveCamera;\n  // Whether or not the three.js canvas renderer and scene have been initialized.\n  // Note that we do not use state here, as we just want to prevent redundant init\n  // calls in useEffect.\n  let initialized = false;\n\n  useEffect(init, []);\n\n  function init(): void {\n    // Check whether initialized.\n    if (initialized) {\n      return;\n    }\n    initialized = true;\n\n    // Init the three.js WebGLRenderer, which will draw the scene on the canvas.\n    renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.localClippingEnabled = true;\n    document.body.appendChild(renderer.domElement);\n\n    // Init scene, which holds objects for rendering.\n    scene = new THREE.Scene();\n\n    // Init camera\n    camera = new THREE.PerspectiveCamera(\n      40,\n      window.innerWidth / window.innerHeight,\n      1,\n      200\n    );\n\n    camera.position.set(-1.5, 2.5, 3.0);\n\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.addEventListener(\"change\", render); // use only if there is no animation loop\n    controls.minDistance = 1;\n    controls.maxDistance = 10;\n    controls.enablePan = false;\n\n    const light = new THREE.HemisphereLight(0xffffff, 0x080808, 4.5);\n    light.position.set(-1.25, 1, 1.25);\n    scene.add(light);\n\n    // Create an earth sphere around which our MMODs will be orbit.\n    const earthGroup = new THREE.Group();\n    for (let i = 1; i <= 30; i += 2) {\n      const geometry = new THREE.SphereGeometry(i / 30, 48, 24);\n\n      const material = new THREE.MeshPhongMaterial({\n        color: new THREE.Color().setHSL(\n          Math.random(),\n          0.5,\n          0.5,\n          THREE.SRGBColorSpace\n        ),\n        side: THREE.DoubleSide,\n        alphaToCoverage: true,\n      });\n\n      earthGroup.add(new THREE.Mesh(geometry, material));\n    }\n    scene.add(earthGroup);\n\n    const mmods = new THREE.Group();\n\n    const gui = new GUI();\n\n    gui.add(GUI_PARAMS, \"alphaToCoverage\").onChange(function (value) {\n      earthGroup.children.forEach((c: any) => {\n        c.material.alphaToCoverage = Boolean(value);\n        c.material.needsUpdate = true;\n      });\n\n      render();\n    });\n\n    // Add a window event listener that will fire when the browser window is resized.\n    window.addEventListener(\"resize\", onWindowResize);\n  }\n\n  function onWindowResize(): void {\n    // Set the ratio of the camera's aspect to match the browser window size.\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    render();\n  }\n\n  function render(): void {\n    renderer.render(scene, camera);\n  }\n\n  return <div className=\"kepler\"></div>;\n}\n\nexport default Kepler;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}