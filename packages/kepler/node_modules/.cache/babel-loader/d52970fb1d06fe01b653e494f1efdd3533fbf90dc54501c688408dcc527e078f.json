{"ast":null,"code":"var _jsxFileName = \"/home/jake/ptolemy/mmod/packages/kepler/src/Kepler.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport \"./Kepler.css\";\nimport * as THREE from \"three\";\nimport * as satellite from \"satellite.js\";\nimport { GUI } from \"three/examples/jsm/libs/lil-gui.module.min.js\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { MMOD } from \"./demo/MMOD\";\nimport { EARTH_RADIUS } from \"./helpers/Constants\";\nimport { Identifier } from \"./demo/Identifier\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GUI_PARAMS = {\n  showHelpers: true,\n  alphaToCoverage: true\n};\n\n// TODO: Make this a GUI variable.\n// Seconds that will elapse in sim time per animation frame.\nconst SECONDS_PER_FRAME = 10;\nfunction Kepler() {\n  _s();\n  // TODO: Move to state?\n\n  // Main components of the three.js nested web GL process.\n  let renderer;\n  let scene;\n  let camera;\n  // Current sim time in UTC seconds. Used in the event we want to speed things up.\n  let time;\n  // Whether or not the three.js canvas renderer and scene have been initialized.\n  // Note that we do not use state here, as we just want to prevent redundant init\n  // calls in useEffect.\n  let initialized = false;\n  const mmods = [];\n  // Alice is an Identifier agent observing MMODs.\n  let alice;\n  useEffect(init, []);\n  useEffect(tleTest, []);\n  function tleTest() {\n    const ISS_TLE = [`1 25544U 98067A   19156.50900463  .00003075  00000-0  59442-4 0  9992`, `2 25544  51.6433  59.2583 0008217  16.4489 347.6017 15.51174618173442`];\n    const satrec = satellite.twoline2satrec(ISS_TLE[0], ISS_TLE[1]);\n    console.log(\"satrec\", satrec);\n\n    // Get the position of the satellite at the given date\n    const date = new Date();\n    date.setHours(date.getHours() + 4);\n    const positionAndVelocity = satellite.propagate(satrec, date);\n    if (typeof positionAndVelocity === \"boolean\") {\n      console.log(\"Is a boolean.\", positionAndVelocity);\n      return;\n    }\n    const gmst = satellite.gstime(date);\n    const position = satellite.eciToGeodetic(positionAndVelocity.position, gmst);\n    console.log(\"Positional data:\");\n    console.log(position);\n    console.log(position.longitude); // in radians\n    console.log(position.latitude); // in radians\n    console.log(position.height); // in km\n  }\n  function init() {\n    // Check whether initialized.\n    if (initialized) {\n      return;\n    }\n    initialized = true;\n\n    // Set initial UTC timestamp in seconds.\n    time = new Date().getUTCSeconds();\n\n    // Init the three.js WebGLRenderer, which will draw the scene on the canvas.\n    renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.localClippingEnabled = true;\n    document.body.appendChild(renderer.domElement);\n\n    // Init scene, which holds objects for rendering.\n    scene = new THREE.Scene();\n\n    // Init camera\n    camera = new THREE.PerspectiveCamera(40, window.innerWidth / window.innerHeight, 1, 200);\n    camera.position.set(-EARTH_RADIUS - 10, EARTH_RADIUS + 10, EARTH_RADIUS + 10);\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.addEventListener(\"change\", render); // use only if there is no animation loop\n    controls.minDistance = EARTH_RADIUS + 10;\n    controls.maxDistance = EARTH_RADIUS + 18;\n    controls.enablePan = false;\n    const light = new THREE.HemisphereLight(0xffffff, 0x080808, 4.5);\n    light.position.set(-4, 1, 1.25);\n    scene.add(light);\n\n    // Create an earth sphere around which our MMODs will be orbit.\n    // TODO: Add a transparent slightly larger sphere to illustrate the range of LEO.\n    const earthGroup = new THREE.Group();\n    const earthGeometry = new THREE.SphereGeometry(EARTH_RADIUS, 48, 24);\n    const earthMaterial = new THREE.MeshPhongMaterial({\n      color: new THREE.Color().setHSL(0.8, 0.5, 0.5, THREE.SRGBColorSpace),\n      side: THREE.DoubleSide,\n      alphaToCoverage: true\n    });\n    earthGroup.add(new THREE.Mesh(earthGeometry, earthMaterial));\n    // Add the earth group to the scene.\n    scene.add(earthGroup);\n\n    // Init the MMOD meshes, small object points that will be orbiting the\n    // earth sphere.\n    for (let i = 0; i < 500; i++) {\n      const mmod = new MMOD(scene);\n      mmods.push(mmod);\n    }\n\n    // Init Alice, an Identifier.\n    alice = new Identifier(scene);\n\n    // Init and set up the mini GUI\n    const gui = new GUI();\n    gui.add(GUI_PARAMS, \"alphaToCoverage\").onChange(function (value) {\n      earthGroup.children.forEach(c => {\n        c.material.alphaToCoverage = Boolean(value);\n        c.material.needsUpdate = true;\n      });\n      render();\n    });\n\n    // Add a window event listener that will fire when the browser window is resized.\n    window.addEventListener(\"resize\", onWindowResize);\n\n    // Start the animation process.\n    animate();\n\n    // TODO: REMOVE\n    const date = new Date();\n    date.setUTCSeconds(time);\n    const tle = mmods[0].tle(date);\n    console.log(\"MMOD TLE:\", \"\\n\", tle[0], \"\\n\", tle[1]);\n\n    // const satrec = satellite.twoline2satrec(tle[0], tle[1]);\n    // console.log(\"MMOD SATREC:\", satrec);\n\n    // // Get the position of the satellite at the given date\n    // date.setHours(date.getHours() + 4);\n    // const positionAndVelocity = satellite.propagate(satrec, date);\n    // if (typeof positionAndVelocity === \"boolean\") {\n    //   console.log(\"Is a boolean.\", positionAndVelocity);\n    //   return;\n    // }\n    // const gmst = satellite.gstime(date);\n    // const position = satellite.eciToGeodetic(\n    //   positionAndVelocity.position as any,\n    //   gmst\n    // );\n\n    // console.log(\"Positional data:\");\n    // console.log(position);\n    // console.log(position.longitude); // in radians\n    // console.log(position.latitude); // in radians\n    // console.log(position.height); // in km\n  }\n  function onWindowResize() {\n    // Set the ratio of the camera's aspect to match the browser window size.\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    render();\n  }\n  function render() {\n    renderer.render(scene, camera);\n  }\n  function animate() {\n    time += SECONDS_PER_FRAME;\n    requestAnimationFrame(animate);\n    for (const mmod of mmods) {\n      // const MMOD_TLE = mmod.tle(new Date());\n    }\n    render();\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"kepler\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 10\n  }, this);\n}\n_s(Kepler, \"3ubReDTFssvu4DHeldAg55cW/CI=\");\n_c = Kepler;\nexport default Kepler;\nvar _c;\n$RefreshReg$(_c, \"Kepler\");","map":{"version":3,"names":["React","useEffect","THREE","satellite","GUI","OrbitControls","MMOD","EARTH_RADIUS","Identifier","jsxDEV","_jsxDEV","GUI_PARAMS","showHelpers","alphaToCoverage","SECONDS_PER_FRAME","Kepler","_s","renderer","scene","camera","time","initialized","mmods","alice","init","tleTest","ISS_TLE","satrec","twoline2satrec","console","log","date","Date","setHours","getHours","positionAndVelocity","propagate","gmst","gstime","position","eciToGeodetic","longitude","latitude","height","getUTCSeconds","WebGLRenderer","antialias","setPixelRatio","window","devicePixelRatio","setSize","innerWidth","innerHeight","localClippingEnabled","document","body","appendChild","domElement","Scene","PerspectiveCamera","set","controls","addEventListener","render","minDistance","maxDistance","enablePan","light","HemisphereLight","add","earthGroup","Group","earthGeometry","SphereGeometry","earthMaterial","MeshPhongMaterial","color","Color","setHSL","SRGBColorSpace","side","DoubleSide","Mesh","i","mmod","push","gui","onChange","value","children","forEach","c","material","Boolean","needsUpdate","onWindowResize","animate","setUTCSeconds","tle","aspect","updateProjectionMatrix","requestAnimationFrame","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/jake/ptolemy/mmod/packages/kepler/src/Kepler.tsx"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport \"./Kepler.css\";\nimport * as THREE from \"three\";\nimport * as satellite from \"satellite.js\";\nimport { GUI } from \"three/examples/jsm/libs/lil-gui.module.min.js\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { MMOD } from \"./demo/MMOD\";\nimport { EARTH_RADIUS } from \"./helpers/Constants\";\nimport { Identifier } from \"./demo/Identifier\";\n\nconst GUI_PARAMS = {\n  showHelpers: true,\n  alphaToCoverage: true,\n};\n\n// TODO: Make this a GUI variable.\n// Seconds that will elapse in sim time per animation frame.\nconst SECONDS_PER_FRAME = 10;\n\nfunction Kepler() {\n  // TODO: Move to state?\n\n  // Main components of the three.js nested web GL process.\n  let renderer: THREE.WebGLRenderer;\n  let scene: THREE.Scene;\n  let camera: THREE.PerspectiveCamera;\n  // Current sim time in UTC seconds. Used in the event we want to speed things up.\n  let time: number;\n  // Whether or not the three.js canvas renderer and scene have been initialized.\n  // Note that we do not use state here, as we just want to prevent redundant init\n  // calls in useEffect.\n  let initialized = false;\n\n  const mmods: MMOD[] = [];\n  // Alice is an Identifier agent observing MMODs.\n  let alice: Identifier;\n\n  useEffect(init, []);\n\n  useEffect(tleTest, []);\n  function tleTest(): void {\n    const ISS_TLE = [\n      `1 25544U 98067A   19156.50900463  .00003075  00000-0  59442-4 0  9992`,\n      `2 25544  51.6433  59.2583 0008217  16.4489 347.6017 15.51174618173442`,\n    ];\n    const satrec = satellite.twoline2satrec(ISS_TLE[0], ISS_TLE[1]);\n    console.log(\"satrec\", satrec);\n\n    // Get the position of the satellite at the given date\n    const date = new Date();\n    date.setHours(date.getHours() + 4);\n    const positionAndVelocity = satellite.propagate(satrec, date);\n    if (typeof positionAndVelocity === \"boolean\") {\n      console.log(\"Is a boolean.\", positionAndVelocity);\n      return;\n    }\n    const gmst = satellite.gstime(date);\n    const position = satellite.eciToGeodetic(\n      positionAndVelocity.position as any,\n      gmst\n    );\n\n    console.log(\"Positional data:\");\n    console.log(position);\n    console.log(position.longitude); // in radians\n    console.log(position.latitude); // in radians\n    console.log(position.height); // in km\n  }\n\n  function init(): void {\n    // Check whether initialized.\n    if (initialized) {\n      return;\n    }\n    initialized = true;\n\n    // Set initial UTC timestamp in seconds.\n    time = new Date().getUTCSeconds();\n\n    // Init the three.js WebGLRenderer, which will draw the scene on the canvas.\n    renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.localClippingEnabled = true;\n    document.body.appendChild(renderer.domElement);\n\n    // Init scene, which holds objects for rendering.\n    scene = new THREE.Scene();\n\n    // Init camera\n    camera = new THREE.PerspectiveCamera(\n      40,\n      window.innerWidth / window.innerHeight,\n      1,\n      200\n    );\n\n    camera.position.set(\n      -EARTH_RADIUS - 10,\n      EARTH_RADIUS + 10,\n      EARTH_RADIUS + 10\n    );\n\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.addEventListener(\"change\", render); // use only if there is no animation loop\n    controls.minDistance = EARTH_RADIUS + 10;\n    controls.maxDistance = EARTH_RADIUS + 18;\n    controls.enablePan = false;\n\n    const light = new THREE.HemisphereLight(0xffffff, 0x080808, 4.5);\n    light.position.set(-4, 1, 1.25);\n    scene.add(light);\n\n    // Create an earth sphere around which our MMODs will be orbit.\n    // TODO: Add a transparent slightly larger sphere to illustrate the range of LEO.\n    const earthGroup = new THREE.Group();\n    const earthGeometry = new THREE.SphereGeometry(EARTH_RADIUS, 48, 24);\n    const earthMaterial = new THREE.MeshPhongMaterial({\n      color: new THREE.Color().setHSL(0.8, 0.5, 0.5, THREE.SRGBColorSpace),\n      side: THREE.DoubleSide,\n      alphaToCoverage: true,\n    });\n    earthGroup.add(new THREE.Mesh(earthGeometry, earthMaterial));\n    // Add the earth group to the scene.\n    scene.add(earthGroup);\n\n    // Init the MMOD meshes, small object points that will be orbiting the\n    // earth sphere.\n    for (let i = 0; i < 500; i++) {\n      const mmod = new MMOD(scene);\n      mmods.push(mmod);\n    }\n\n    // Init Alice, an Identifier.\n    alice = new Identifier(scene);\n\n    // Init and set up the mini GUI\n    const gui = new GUI();\n    gui.add(GUI_PARAMS, \"alphaToCoverage\").onChange(function (value) {\n      earthGroup.children.forEach((c: any) => {\n        c.material.alphaToCoverage = Boolean(value);\n        c.material.needsUpdate = true;\n      });\n\n      render();\n    });\n\n    // Add a window event listener that will fire when the browser window is resized.\n    window.addEventListener(\"resize\", onWindowResize);\n\n    // Start the animation process.\n    animate();\n\n    // TODO: REMOVE\n    const date = new Date();\n    date.setUTCSeconds(time);\n    const tle = mmods[0].tle(date);\n    console.log(\"MMOD TLE:\", \"\\n\", tle[0], \"\\n\", tle[1]);\n\n    // const satrec = satellite.twoline2satrec(tle[0], tle[1]);\n    // console.log(\"MMOD SATREC:\", satrec);\n\n    // // Get the position of the satellite at the given date\n    // date.setHours(date.getHours() + 4);\n    // const positionAndVelocity = satellite.propagate(satrec, date);\n    // if (typeof positionAndVelocity === \"boolean\") {\n    //   console.log(\"Is a boolean.\", positionAndVelocity);\n    //   return;\n    // }\n    // const gmst = satellite.gstime(date);\n    // const position = satellite.eciToGeodetic(\n    //   positionAndVelocity.position as any,\n    //   gmst\n    // );\n\n    // console.log(\"Positional data:\");\n    // console.log(position);\n    // console.log(position.longitude); // in radians\n    // console.log(position.latitude); // in radians\n    // console.log(position.height); // in km\n  }\n\n  function onWindowResize(): void {\n    // Set the ratio of the camera's aspect to match the browser window size.\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    render();\n  }\n\n  function render(): void {\n    renderer.render(scene, camera);\n  }\n\n  function animate(): void {\n    time += SECONDS_PER_FRAME;\n\n    requestAnimationFrame(animate);\n\n    for (const mmod of mmods) {\n      // const MMOD_TLE = mmod.tle(new Date());\n    }\n\n    render();\n  }\n\n  return <div className=\"kepler\"></div>;\n}\n\nexport default Kepler;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}